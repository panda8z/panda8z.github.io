{"componentChunkName":"component---src-templates-blog-list-js","path":"/list-2","result":{"data":{"site":{"siteMetadata":{"title":"Panda8z`s Blog"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"img 本篇文章，我们着重介绍Go编程中的Pipeline模式。对于Pipeline用过Unix/Linux命令行的人都不会陌生，他是一种把各种命令拼接起来完成一个更强功能的技术方法。在今天，流式处理，函数式编程，以及应用网关对微服务进行简单的API…","fields":{"slug":"/Go编程模式-转载自酷壳/GO编程模式：PIPELINE/"},"frontmatter":{"slug":"go-program-pattern-pipeline","date":"January 24, 2021","title":"GO编程模式08：PIPELINE"}}},{"node":{"excerpt":"img 之前写过一篇《Python修饰器的函数式编程》，\n这种模式很容易的可以把一些函数装配到另外一些函数上，可以让你的代码更为的简单，也可以让一些“小功能型”的代码复用性更高，\n让代码中的函数可以像乐高玩具那样自由地拼装。\n所以，一直以来，我对修饰器decoration…","fields":{"slug":"/Go编程模式-转载自酷壳/GO编程模式：修饰器/"},"frontmatter":{"slug":"go-program-pattern-decorator","date":"January 24, 2021","title":"GO 编程模式07：修饰器"}}},{"node":{"excerpt":"img 图片来源：GopherSource 在本篇文章中，我们将要学习一下Go语言的代码生成的玩法。Go…","fields":{"slug":"/Go编程模式-转载自酷壳/GO 编程模式：GO GENERATION/"},"frontmatter":{"slug":"go-program-pattern-generation","date":"January 24, 2021","title":"GO 编程模式06：GO GENERATION"}}}]}},"pageContext":{"limit":3,"skip":3,"numPages":4,"currentPage":2}},"staticQueryHashes":["2841359383","394414991"]}