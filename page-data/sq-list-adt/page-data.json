{"componentChunkName":"component---src-templates-blog-post-js","path":"/sq-list-adt","result":{"data":{"site":{"siteMetadata":{"title":"Panda8z`s Blog"}},"markdownRemark":{"id":"608a39fc-a2ef-5021-b063-3afe3cb2e3a1","excerpt":"抽象定义 部分代码实现","html":"<h2>抽象定义</h2>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">ADT List{\n  数据对象：D={i|i∈ElemSet,i=1,2,…,n,n≥0}\n  数据关系：R={&amp;lt;i-1,i&amp;gt;|ai-1,i∈D,i=2,…,n}\n  基本操作：\n    InitList(&amp;L)\n      操作结果：构造一个空的线性表L。\n    DestroyList(&amp;L)\n      初始条件：线性表L已存在。\n      操作结果：销毁线性表L。\n    ClearList(&amp;L)\n      初始条件：线性表L已存在。\n      操作结果：将L重置为空表。\n    ListEmpty(L)\n      初始条件：线性表L已存在。\n      操作结果：若L为空表，则返回true，否则返回false。\n    ListLength(L)\n      初始条件：线性表L已存在。\n      操作结果：返回L中数据元素个数。\n    GetElem(L,i,&amp;e)\n      初始条件：线性表L已存在，且1≤i≤ListLength(L)。\n      操作结果：用e返回L中第i个数据元素的值。\n    LocateElem(L,e)\n      初始条件：线性表L已存在。\n      操作结果：返回L中第1个值与e相同的元素在L中的位置。若这样的数据元素不存在，则返回值为0。\n    PriorElem(L,cur_e,&amp;pre_e)\n      初始条件：线性表L已存在。\n      操作结果：若cur_e是L的数据元素，且不是第一个，则用pre_e返回其前驱，否则操作失败，pre_e无定义。\n    NextElem(L,cur_e,&amp;next_e)\n      初始条件：线性表L已存在。\n      操作结果：若cur_e是L的数据元素，且不是最后一个，则用next_e返回其后继，否则操作失败，next_e无定义。\n    ListInsert(&amp;L,i,e)\n      初始条件：线性表L已存在，且1≤i≤ListLength(L)+1。\n      操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1。\n    ListDelete(&amp;L,i)\n      初始条件：线性表L已存在且非空，且l≤i≤ListLength(L)。\n      操作结果：删除L的第i个数据元素，L的长度减1。\n    TraverseList(L)\n      初始条件：线性表L已存在。\n      操作结果：对线性表L进行遍历，在遍历过程中对L的每个结点访问一次。\n}ADT List</code></pre></div>\n<h2>部分代码实现</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//函数结果状态代码</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OK</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ERROR</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OVERFLOW</span> <span class=\"token expression\"><span class=\"token operator\">-</span><span class=\"token number\">2</span></span></span>\n<span class=\"token comment\">//Status是函数返回值类型，其值是函数结果状态代码。</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> Status<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MaxSize <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>\n\nStatus <span class=\"token function\">InitList</span><span class=\"token punctuation\">(</span>SqList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span><span class=\"token comment\">//构造一个空的顺序表L</span>\n   L<span class=\"token punctuation\">.</span>elem<span class=\"token operator\">=</span>new ElemType<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">//为顺序表分配一个大小为MAXSIZE的数组空间</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">)</span> <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>OVERFLOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">//存储分配失败退出</span>\n   L<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                                  <span class=\"token comment\">//空表长度为0</span>\n   <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nStatus <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>SqList L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>ElemType <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span><span class=\"token comment\">//取值操作是根据指定的位置序号i，获取顺序表中第i个数据元素的值</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>i<span class=\"token operator\">></span>L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span>          <span class=\"token comment\">//判断i值是否合理，若不合理，返回ERROR</span>\n   e<span class=\"token operator\">=</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                            <span class=\"token comment\">//elem[i-1]单元存储第i个数据元素</span>\n   <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">LocateElem</span><span class=\"token punctuation\">(</span>SqList L<span class=\"token punctuation\">,</span>ElemType e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span><span class=\"token comment\">//在顺序表L中查找值为e的数据元素，返回其序号</span>\n   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span> L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">//查找成功，返回序号i+1</span>\n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                                    <span class=\"token comment\">//查找失败，返回0</span>\n<span class=\"token punctuation\">}</span>\n\nStatus <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>SqList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i <span class=\"token punctuation\">,</span>ElemType e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span><span class=\"token comment\">//在顺序表L中第i个位置插入新的元素e，i值的合法范围是1≤i≤L.length+1</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span>L<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span>                        <span class=\"token comment\">//i值不合法</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span>length<span class=\"token operator\">==</span>MAXSIZE<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span>                          <span class=\"token comment\">//当前存储空间已满</span>\n   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span>L<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n     L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                                     <span class=\"token comment\">//插入位置及之后的元素后移</span>\n   L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>                                               <span class=\"token comment\">//将新元素e放入第i个位置</span>\n   <span class=\"token operator\">++</span>L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>                                                  <span class=\"token comment\">//表长加1</span>\n   <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nStatus <span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>SqList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span><span class=\"token comment\">//在顺序表L中删除第i个元素，i值的合法范围是1≤i≤L.length</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span>L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span> <span class=\"token comment\">//i值不合法</span>\n   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>L<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">//被删除元素之后的元素前移</span>\n   <span class=\"token operator\">--</span>L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>                                   <span class=\"token comment\">//表长减1</span>\n   <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"线性表抽象定义","date":"2021-02-20T11:09:35.000Z","description":null}},"previous":{"fields":{"slug":"/2021-02-14-GoSpec/"},"frontmatter":{"title":"Golang Spec","slug":"go-spec"}},"next":{"fields":{"slug":"/数据结构/单链表/ADT-单链表/"},"frontmatter":{"title":"","slug":null}}},"pageContext":{"id":"608a39fc-a2ef-5021-b063-3afe3cb2e3a1","previousPostId":"7599da0c-6ddc-58e8-b4d3-5e9890b778c8","nextPostId":"cc088cad-ecce-55b2-b164-c7fa4786b2bf"}},"staticQueryHashes":["2841359383","394414991"]}