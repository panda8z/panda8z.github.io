{"componentChunkName":"component---src-templates-blog-post-js","path":"/go-program-pattern-generation","result":{"data":{"site":{"siteMetadata":{"title":"Panda8z`s Blog"}},"markdownRemark":{"id":"03fb552d-357a-585b-9592-88d70c00c609","excerpt":"img 图片来源：GopherSource 在本篇文章中，我们将要学习一下Go语言的代码生成的玩法。Go…","html":"<p><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.generate-296x300.png\" alt=\"img\"></p>\n<p>图片来源：<a href=\"https://gophersource.com/\">GopherSource</a></p>\n<p>在本篇文章中，我们将要学习一下Go语言的代码生成的玩法。Go语言代码生成主要还是用来解决编程泛型的问题，泛型编程主要解决的问题是因为静态类型语言有类型，所以，相关的算法或是对数据处理的程序会因为类型不同而需要复制一份，这样导致数据类型和算法功能耦合的问题。泛型编程可以解决这样的问题，就是说，在写代码的时候，不用关心处理数据的类型，只需要关心相当处理逻辑。泛型编程是静态语言中非常非常重要的特征，如果没有泛型，我们很难做到多态，也很难完成抽象，会导致我们的代码冗余量很大。</p>\n<h2>现实中的类比</h2>\n<p>举个现实当中的例子，用螺丝刀来做具比方，螺丝刀本来就是一个拧螺丝的动作，但是因为螺丝的类型太多，有平口的，有十字口的，有六角的……螺丝还有大小尺寸，导致我们的螺丝刀为了要适配各种千奇百怪的螺丝类型（样式和尺寸），导致要做出各种各样的螺丝刀。</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/type01-300x225.png\" alt=\"img\"></td>\n<td><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/type02-300x225.png\" alt=\"img\"></td>\n</tr>\n</tbody>\n</table>\n<p>而真正的抽象是螺丝刀不应该关心螺丝的类型，只要关注好自己的功能是否完备，并让自己可以适配于不同类型的螺丝，如下所示，这就是所谓的泛型编程要解决的实际问题。</p>\n<p><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/type03-300x226.png\" alt=\"img\"></p>\n<h2>Go语方的类型检查</h2>\n<p>因为Go语言目前并不支持真正的泛型，所以，只能用 <code class=\"language-text\">interface{}</code> 这样的类似于 <code class=\"language-text\">void*</code> 这种过度泛型来玩这就导致了我们在实际过程中就需要进行类型检查。Go语言的类型检查有两种技术，一种是 Type Assert，一种是Reflection。</p>\n<h3>Type Assert</h3>\n<p>这种技术，一般是对某个变量进行 <code class=\"language-text\">.(type)</code>的转型操作，其会返回两个值， <code class=\"language-text\">variable, error</code>，第一个返回值是被转换好的类型，第二个是如果不能转换类型，则会报错。</p>\n<p>比如下面的示例，我们有一个通用类型的容器，可以进行 <code class=\"language-text\">Put(val)</code>和 <code class=\"language-text\">Get()</code>，注意，其使用了 <code class=\"language-text\">interface{}</code>作泛型</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">//Container is a generic container, accepting anything.</span>\n<span class=\"token keyword\">type</span> Container <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Put adds an element to the container.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Container<span class=\"token punctuation\">)</span> <span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>elem <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Get gets an element from the container.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Container<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    elem <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> elem\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在使用中，我们可以这样使用</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">intContainer <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Container<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nintContainer<span class=\"token punctuation\">.</span><span class=\"token function\">Put</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nintContainer<span class=\"token punctuation\">.</span><span class=\"token function\">Put</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>但是，在把数据取出来时，因为类型是 <code class=\"language-text\">interface{}</code> ，所以，你还要做一个转型，如果转型成功能才能进行后续操作（因为 <code class=\"language-text\">interface{}</code>太泛了，泛到什么类型都可以放）下在是一个Type Assert的示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// assert that the actual type is int</span>\nelem<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> intContainer<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to read an int from intContainer\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"assertExample: %d (%T)\\n\"</span><span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Reflection</h3>\n<p>对于反射，我们需要把上面的代码修改如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Container <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    s reflect<span class=\"token punctuation\">.</span>Value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewContainer</span><span class=\"token punctuation\">(</span>t reflect<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">,</span> size <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Container <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> size <span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span>  <span class=\"token punctuation\">{</span> size<span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Container<span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">:</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">MakeSlice</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">SliceOf</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Container<span class=\"token punctuation\">)</span> <span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>val <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Put: cannot put a %T into a slice of %s\"</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    c<span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Container<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>refval <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>refval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> reflect<span class=\"token punctuation\">.</span>Ptr <span class=\"token operator\">||</span>\n        reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>refval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get: needs *%s but got %T\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> refval<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>refval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span> c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">Slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码并不难读，这是完全使用 reflection的玩法，其中</p>\n<ul>\n<li>在 <code class=\"language-text\">NewContainer()</code>会根据参数的类型初始化一个Slice</li>\n<li>在 <code class=\"language-text\">Put()</code>时候，会检查 <code class=\"language-text\">val</code> 是否和Slice的类型一致。</li>\n<li>在 <code class=\"language-text\">Get()</code>时，我们需要用一个入参的方式，因为我们没有办法返回 <code class=\"language-text\">reflect.Value</code> 或是 <code class=\"language-text\">interface{}</code>，不然还要做Type Assert</li>\n<li>但是有类型检查，所以，必然会有检查不对的道理 ，因此，需要返回 <code class=\"language-text\">error</code></li>\n</ul>\n<p>于是在使用上面这段代码的时候，会是下面这个样子：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">f1 <span class=\"token operator\">:=</span> <span class=\"token number\">3.1415926</span>\nf2 <span class=\"token operator\">:=</span> <span class=\"token number\">1.41421356237</span>\nc <span class=\"token operator\">:=</span> <span class=\"token function\">NewMyContainer</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ng <span class=\"token operator\">:=</span> <span class=\"token number\">0.0</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v (%T)\\n\"</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span> <span class=\"token comment\">//3.1415926 (float64)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//1.4142135623</span></code></pre></div>\n<p>我们可以看到，Type Assert是不用了，但是用反射写出来的代码还是有点复杂的。那么有没有什么好的方法？</p>\n<h2>它山之石</h2>\n<p>对于泛型编程最牛的语言 C++ 来说，这类的问题都是使用 Template来解决的。</p>\n<p>1:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"> <span class=\"token comment\">//用&lt;class T>来描述泛型</span>\n template <span class=\"token operator\">&lt;</span>class T<span class=\"token operator\">></span> T GetMax <span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">,</span> T b<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>     \n   T result<span class=\"token punctuation\">;</span>     \n   result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span>? a <span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">;</span>     \n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> \n   </code></pre></div>\n<p>2:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token builtin\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//生成int类型的函数k=GetMax&lt;int>(i,j); </span>\nlong l<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//生成long类型的函数n=GetMax&lt;long>(l,m); </span></code></pre></div>\n<p>C++的编译器会在编译时分析代码，根据不同的变量类型来自动化的生成相关类型的函数或类。C++叫模板的具体化。</p>\n<p>这个技术是编译时的问题，所以，不需要我们在运行时进行任何的运行的类型识别，我们的程序也会变得比较的干净。</p>\n<p>那么，我们是否可以在Go中使用C++的这种技术呢？答案是肯定的，只是Go的编译器不帮你干，你需要自己动手。</p>\n<h2>Go Generator</h2>\n<p>要玩 Go的代码生成，你需要三件事：</p>\n<ol>\n<li>一个函数模板，其中设置好相应的占位符。</li>\n<li>一个脚本，用于按规则来替换文本并生成新的代码。</li>\n<li>一行注释代码。</li>\n</ol>\n<h3>函数模板</h3>\n<p>我们把我们之前的示例改成模板。取名为 <code class=\"language-text\">container.tmp.go</code> 放在 <code class=\"language-text\">./template/</code>下</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> PACKAGE_NAME\n\n<span class=\"token keyword\">type</span> GENERIC_NAMEContainer <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>GENERIC_TYPE\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewGENERIC_NAMEContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>GENERIC_NAMEContainer <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>GENERIC_NAMEContainer<span class=\"token punctuation\">{</span>s<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>GENERIC_TYPE<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>GENERIC_NAMEContainer<span class=\"token punctuation\">)</span> <span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>val GENERIC_TYPE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>GENERIC_NAMEContainer<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> GENERIC_TYPE <span class=\"token punctuation\">{</span>\n    r <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    c<span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们可以看到函数模板中我们有如下的占位符：</p>\n<ul>\n<li><code class=\"language-text\">PACKAGE_NAME</code> – 包名</li>\n<li><code class=\"language-text\">GENERIC_NAME</code> – 名字</li>\n<li><code class=\"language-text\">GENERIC_TYPE</code> – 实际的类型</li>\n</ul>\n<p>其它的代码都是一样的。</p>\n<h3>函数生成脚本</h3>\n<p>然后，我们有一个叫<code class=\"language-text\">gen.sh</code>的生成脚本，如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">#!/bin/bash\n\nset -e\n\nSRC_FILE=${1}\nPACKAGE=${2}\nTYPE=${3}\nDES=${4}\n\\#uppcase the first char\nPREFIX=&quot;$(tr &#39;[:lower:]&#39; &#39;[:upper:]&#39; &lt;&lt;&lt; ${TYPE:0:1})${TYPE:1}&quot;\nDES_FILE=$(echo ${TYPE}| tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;)_${DES}.go\nsed &#39;s/PACKAGE_NAME/&#39;&quot;${PACKAGE}&quot;&#39;/g&#39; ${SRC_FILE} | \\\n    sed &#39;s/GENERIC_TYPE/&#39;&quot;${TYPE}&quot;&#39;/g&#39; | \\\n    sed &#39;s/GENERIC_NAME/&#39;&quot;${PREFIX}&quot;&#39;/g&#39; &gt; ${DES_FILE}</code></pre></div>\n<p>其需要4个参数：</p>\n<ul>\n<li>模板源文件</li>\n<li>包名</li>\n<li>实际需要具体化的类型</li>\n<li>用于构造目标文件名的后缀</li>\n</ul>\n<p>然后其会用 <code class=\"language-text\">sed</code> 命令去替换我们的上面的函数模板，并生成到目标文件中。（关于sed命令请参看本站的《<a href=\"https://coolshell.cn/articles/9104.html\">sed 简明教程</a>》）</p>\n<h3>生成代码</h3>\n<p>接下来，我们只需要在代码中打一个特殊的注释：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">//go:generate ./gen.sh ./template/container.tmp.go gen uint32 container</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">generateUint32Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> u <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token builtin\">uint32</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\n    c <span class=\"token operator\">:=</span> <span class=\"token function\">NewUint32Container</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span>\n    v <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"generateExample: %d (%T)\\n\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//go:generate ./gen.sh ./template/container.tmp.go gen string container</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">generateStringExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> s <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span>\n    c <span class=\"token operator\">:=</span> <span class=\"token function\">NewStringContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    v <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"generateExample: %s (%T)\\n\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中，</p>\n<ul>\n<li>第一个注释是生成包名为 <code class=\"language-text\">gen</code> 类型为 <code class=\"language-text\">uint32</code> 目标文件名以 <code class=\"language-text\">container</code> 为后缀</li>\n<li>第二个注释是生成包名为 <code class=\"language-text\">gen</code> 类型为 <code class=\"language-text\">string</code> 目标文件名以 <code class=\"language-text\">container</code> 为后缀</li>\n</ul>\n<p>然后，在工程目录中直接执行 <code class=\"language-text\">go generate</code> 命令，就会生成如下两份代码，</p>\n<p>一份文件名为<code class=\"language-text\">uint32_container.go</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> gen\n\n<span class=\"token keyword\">type</span> Uint32Container <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint32</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewUint32Container</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Uint32Container <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Uint32Container<span class=\"token punctuation\">{</span>s<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Uint32Container<span class=\"token punctuation\">)</span> <span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">uint32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Uint32Container<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">uint32</span> <span class=\"token punctuation\">{</span>\n    r <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    c<span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>另一份的文件名为 <code class=\"language-text\">string_container.go</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> gen\n\n<span class=\"token keyword\">type</span> StringContainer <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewStringContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>StringContainer <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>StringContainer<span class=\"token punctuation\">{</span>s<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>StringContainer<span class=\"token punctuation\">)</span> <span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>StringContainer<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    r <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    c<span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这两份代码可以让我们的代码完全编译通过，所付出的代价就是需要多执行一步 <code class=\"language-text\">go generate</code> 命令。</p>\n<h2>新版Filter</h2>\n<p>现在我们再回头看看我们之前《<a href=\"https://coolshell.cn/articles/21164.html\">Go编程模式：Map-Reduce</a>》中的那些个用反射整出来的例子，有了这样的技术，我就不必在代码里用那些晦涩难懂的反射来做运行时的类型检查了。我们可以写下很干净的代码，让编译器在编译时检查类型对不对。下面是一个Fitler的模板文件 <code class=\"language-text\">filter.tmp.go</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> PACKAGE_NAME\n\n<span class=\"token keyword\">type</span> GENERIC_NAMEList <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>GENERIC_TYPE\n<span class=\"token keyword\">type</span> GENERIC_NAMEToBool <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>GENERIC_TYPE<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>al GENERIC_NAMEList<span class=\"token punctuation\">)</span> <span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>f GENERIC_NAMEToBool<span class=\"token punctuation\">)</span> GENERIC_NAMEList <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> ret GENERIC_NAMEList\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> al <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ret <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ret\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>于是我们可在需要使用这个的地方，加上相关的 go generate 的注释</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Employee <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  Name     <span class=\"token builtin\">string</span>\n  Age      <span class=\"token builtin\">int</span>\n  Vacation <span class=\"token builtin\">int</span>\n  Salary   <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//go:generate ./gen.sh ./template/filter.tmp.go gen Employee filter</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">filterEmployeeExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> EmployeeList<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">\"Hao\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7500</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> filter EmployeeList\n  filter <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>Employee<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>Age <span class=\"token operator\">></span> <span class=\"token number\">40</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- Employee.Age > 40 ------\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> e <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> filter <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  filter <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>Employee<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>Salary <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5000</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- Employee.Salary &lt;= 5000 ------\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> e <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> filter <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>第三方工具</h2>\n<p>我们并不需要自己手写 <code class=\"language-text\">gen.sh</code> 这样的工具类，已经有很多第三方的已经写好的可以使用。下面是一个列表：</p>\n<ul>\n<li>Genny – <a href=\"https://github.com/cheekybits/genny\">https://github.com/cheekybits/genny</a></li>\n<li>Generic – <a href=\"https://github.com/taylorchu/generic\">https://github.com/taylorchu/generic</a></li>\n<li>GenGen – <a href=\"https://github.com/joeshaw/gengen\">https://github.com/joeshaw/gengen</a></li>\n<li>Gen – <a href=\"https://github.com/clipperhouse/gen\">https://github.com/clipperhouse/gen</a></li>\n</ul>\n<p>（全文完）</p>\n<p>转载：文章作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 – CoolShell</a></p>\n<p><img src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\" alt=\"img\" style=\"zoom:33%;\"> <img src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" alt=\"img\" style=\"zoom:33%;\">\n关注CoolShell微信公众账号和微信小程序</p>","frontmatter":{"title":"GO 编程模式06：GO GENERATION","date":"2021-01-24T11:06:00.000Z","description":null}},"previous":{"fields":{"slug":"/Go编程模式-转载自酷壳/GO编程模式：MAP-REDUCE/"},"frontmatter":{"title":"GO编程模式05：MAP-REDUCE","slug":"go-program-pattern-map-reduce"}},"next":{"fields":{"slug":"/Go编程模式-转载自酷壳/GO编程模式：修饰器/"},"frontmatter":{"title":"GO 编程模式07：修饰器","slug":"go-program-pattern-decorator"}}},"pageContext":{"id":"03fb552d-357a-585b-9592-88d70c00c609","previousPostId":"4e2b5e42-3ea9-5207-ac6d-a067b67d3938","nextPostId":"10a1294c-ceba-5700-8dfe-d97b168723ca"}},"staticQueryHashes":["2841359383","394414991"]}