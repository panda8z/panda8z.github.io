{"componentChunkName":"component---src-templates-blog-post-js","path":"/go-spec","result":{"data":{"site":{"siteMetadata":{"title":"Panda8z`s Blog"}},"markdownRemark":{"id":"7599da0c-6ddc-58e8-b4d3-5e9890b778c8","excerpt":"Vocabulary token：符号 CamelCase：驼峰命名法 Non-terminals： 非终结符 EBNF：扩展的巴科思诺尔范式 Productions：产生式 Introduction This is a reference manual for the Go programming language…","html":"<h2>Vocabulary</h2>\n<ul>\n<li>token：符号</li>\n<li>CamelCase：驼峰命名法</li>\n<li>Non-terminals： 非终结符</li>\n<li>EBNF：扩展的巴科思诺尔范式</li>\n<li>Productions：产生式</li>\n</ul>\n<h2>Introduction</h2>\n<p>This is a reference manual for the Go programming language. For more information and other documents, see golang.org.</p>\n<p>Go is a general-purpose language designed with systems programming in mind. It is strongly typed and garbage-collected and has explicit support for concurrent programming. Programs are constructed from packages, whose properties allow efficient management of dependencies.</p>\n<p>The grammar is compact and regular, allowing for easy analysis by automatic tools such as integrated development environments.</p>\n<h2>简介</h2>\n<p>本书是<strong>Go编程语言</strong>（以下简称：Go 或者 Go语言）的参考手册。有关更多信息和其他文档，请参阅 (golang.org)[golang.org] 网站.</p>\n<p>Go是一种通用语言，设计时考虑了系统编程。\n它是强类型和垃圾收集的，并且对并发编程有明确的支持。\n程序是由包构造的，包的属性允许有效地管理依赖关系。</p>\n<p>语法紧凑且规则，通过集成开发环境等自动化工具可以对语法进行轻松分析。</p>\n<h2>Notation</h2>\n<p>The syntax is specified using Extended Backus-Naur Form (EBNF):</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">Production  = production_name &quot;=&quot; [ Expression ] &quot;.&quot; .\nExpression  = Alternative { &quot;|&quot; Alternative } .\nAlternative = Term { Term } .\nTerm        = production_name | token [ &quot;…&quot; token ] | Group | Option | Repetition .\nGroup       = &quot;(&quot; Expression &quot;)&quot; .\nOption      = &quot;[&quot; Expression &quot;]&quot; .\nRepetition  = &quot;{&quot; Expression &quot;}&quot; .</code></pre></div>\n<p>Productions are expressions constructed from terms and the following operators, in increasing precedence:</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">|   alternation\n()  grouping\n[]  option (0 or 1 times)\n{}  repetition (0 to n times)</code></pre></div>\n<p>Lower-case production names are used to identify lexical tokens. Non-terminals are in CamelCase. Lexical tokens are enclosed in double quotes \"\" or back quotes <code class=\"language-text\"></code>.</p>\n<p>The form a … b represents the set of characters from a through b as alternatives. The horizontal ellipsis … is also used elsewhere in the spec to informally denote various enumerations or code snippets that are not further specified. The character … (as opposed to the three characters …) is not a token of the Go language.</p>\n<h2>符号</h2>\n<p>使用<strong>扩展的巴科思诺尔范式</strong>（EBNF）指定语法：</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">Production  = production_name &quot;=&quot; [ Expression ] &quot;.&quot; .\nExpression  = Alternative { &quot;|&quot; Alternative } .\nAlternative = Term { Term } .\nTerm        = production_name | token [ &quot;…&quot; token ] | Group | Option | Repetition .\nGroup       = &quot;(&quot; Expression &quot;)&quot; .\nOption      = &quot;[&quot; Expression &quot;]&quot; .\nRepetition  = &quot;{&quot; Expression &quot;}&quot; .</code></pre></div>\n<p>产生式是由术语和下列运算符构造的表达式，优先级越来越高：</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">|   alternation\n()  grouping\n[]  option (0 or 1 times)\n{}  repetition (0 to n times)</code></pre></div>\n<p>小写字母的产生式名称用于标识<strong>词法符号</strong>。\n非终结符在驼峰命名法中。\n<strong>词法符号</strong>用两个双引号或者反引号包裹起来。</p>\n<p>用形式 <code class=\"language-text\">a…b</code> 表示从a到b的一组字符的替代。\n水平省略号 <code class=\"language-text\">…</code> 也用于规范中的其他地方，非正式地表示未进一步指定的各种枚举或代码段。\n但是这个省略号字符 <code class=\"language-text\">…</code>（而不是三个字符 <code class=\"language-text\">...</code>）不是Go语言的符号。</p>\n<p>词汇表：</p>\n<ul>\n<li>terms：术语</li>\n<li>token：符号</li>\n<li>CamelCase：驼峰命名法</li>\n<li>Non-terminals： 非终结符</li>\n<li>EBNF：扩展的巴科思诺尔范式</li>\n<li>Productions：产生式</li>\n<li>Alternative：可替代的</li>\n<li>Option：选项</li>\n<li>repetition：重复</li>\n<li>times：次</li>\n<li>grouping：集合</li>\n<li>group：组</li>\n</ul>\n<h2>Source code representation</h2>\n<p>Source code is Unicode text encoded in UTF-8. The text is not canonicalized, so a single accented code point is distinct from the same character constructed from combining an accent and a letter; those are treated as two code points. For simplicity, this document will use the unqualified term character to refer to a Unicode code point in the source text.</p>\n<p>Each code point is distinct; for instance, upper and lower case letters are different characters.</p>\n<p>Implementation restriction: For compatibility with other tools, a compiler may disallow the NUL character (U+0000) in the source text.</p>\n<p>Implementation restriction: For compatibility with other tools, a compiler may ignore a UTF-8-encoded byte order mark (U+FEFF) if it is the first Unicode code point in the source text. A byte order mark may be disallowed anywhere else in the source.</p>\n<h3>Characters</h3>\n<p>The following terms are used to denote specific Unicode character classes:</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">newline        = /* the Unicode code point U+000A */ .\nunicode_char   = /* an arbitrary Unicode code point except newline */ .\nunicode_letter = /* a Unicode code point classified as &quot;Letter&quot; */ .\nunicode_digit  = /* a Unicode code point classified as &quot;Number, decimal digit&quot; */ .</code></pre></div>\n<p>In (The Unicode Standard 8.0)[https://www.unicode.org/versions/Unicode8.0.0/], Section 4.5 “General Category” defines a set of character categories. Go treats all characters in any of the Letter categories Lu, Ll, Lt, Lm, or Lo as Unicode letters, and those in the Number category Nd as Unicode digits.</p>\n<h3>Letters and digits</h3>\n<p>The underscore character _ (U+005F) is considered a letter.</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">letter        = unicode_letter | &quot;_&quot; .\ndecimal_digit = &quot;0&quot; … &quot;9&quot; .\nbinary_digit  = &quot;0&quot; | &quot;1&quot; .\noctal_digit   = &quot;0&quot; … &quot;7&quot; .\nhex_digit     = &quot;0&quot; … &quot;9&quot; | &quot;A&quot; … &quot;F&quot; | &quot;a&quot; … &quot;f&quot; .</code></pre></div>\n<h2>源代码表示法</h2>\n<p>源代码是使用 UTF-8 编码的 Unicode 文本。\n文本不是规范化的，因此单个重音代码点与由重音和字母组合而成的相同字符不同；这些字符被视为两个代码点。\n为简单起见，本文档将使用非限定术语字符来引用源文本中的Unicode代码点。</p>\n<p>每个代码点都是不同的；例如，大写和小写字母是不同的字符。</p>\n<p>实现限制：为了与其他工具兼容，编译器可能不允许在源文本中使用NUL字符（U+0000）。</p>\n<p>实现限制：为了与其他工具兼容，如果 UTF-8 编码的<strong>字节序标记</strong>（U+FEFF）是源文本中的第一个 Unicode 代码点，编译器会忽略它。\n除此之外，<strong>字节序标记</strong>不允许在源代码中的任何其他位置使用。</p>\n<h3>符号</h3>\n<p>以下术语用于表示特定的Unicode字符类：</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">newline        = /* the Unicode code point U+000A */ .\nunicode_char   = /* an arbitrary Unicode code point except newline */ .\nunicode_letter = /* a Unicode code point classified as &quot;Letter&quot; */ .\nunicode_digit  = /* a Unicode code point classified as &quot;Number, decimal digit&quot; */ .</code></pre></div>\n<p>在 (Unicode 标准8.0)[https://www.unicode.org/versions/Unicode8.0.0/] 的 4.5 节“通用分类”中定义了一组字符分类。\nGo 将  Lu, Ll, Lt, Lm 和 Lo 分类中的所有字符作为 <strong>Unicode字符</strong>，并将数字分类中的 Nd 分类中的字符作为 <strong>Unicode数字</strong></p>\n<h3>字和数字</h3>\n<p>特别的，下划线字符 <code class=\"language-text\">_</code>(U+005F) 被当成字母。</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">letter        = unicode_letter | &quot;_&quot; .\ndecimal_digit = &quot;0&quot; … &quot;9&quot; .\nbinary_digit  = &quot;0&quot; | &quot;1&quot; .\noctal_digit   = &quot;0&quot; … &quot;7&quot; .\nhex_digit     = &quot;0&quot; … &quot;9&quot; | &quot;A&quot; … &quot;F&quot; | &quot;a&quot; … &quot;f&quot; .</code></pre></div>\n<p>词汇表：</p>\n<ul>\n<li>Characters：字符符号</li>\n<li>letters：字母</li>\n<li>digit：数字</li>\n</ul>\n<h2>Lexical elements</h2>\n<h2>Comments</h2>\n<p>Comments serve as program documentation. There are two forms:</p>\n<ol>\n<li>Line comments start with the character sequence // and stop at the end of the line.</li>\n<li>General comments start with the character sequence /* and stop with the first subsequent character sequence */.</li>\n</ol>\n<p>A comment cannot start inside a rune or string literal, or inside a comment. A general comment containing no newlines acts like a space. Any other comment acts like a newline.</p>\n<h2>词法元素</h2>\n<h3>注释</h3>\n<p>注释作为程序文档文件。\n有以下两种表现形式：</p>\n<ol>\n<li><strong>行注释</strong>总是以连续字符 <code class=\"language-text\">//</code> 开始，直到行尾结束。</li>\n<li><strong>通用注释</strong>总是以一个字符序列<code class=\"language-text\">/*</code>开始，并且以随后的第一个字符序列<code class=\"language-text\">*/</code>结束</li>\n</ol>\n<p>注释不能在字符串字面量或字符串文本内部或注释内部开始。\n不包含换行符的<strong>通用注释</strong>就像一个空格，除此之外，任何其他注释都像新的一行。</p>\n<h3>Tokens</h3>\n<p>Tokens form the vocabulary of the Go language. There are four classes: identifiers, keywords, operators and punctuation, and literals. White space, formed from spaces (U+0020), horizontal tabs (U+0009), carriage returns (U+000D), and newlines (U+000A), is ignored except as it separates tokens that would otherwise combine into a single token. Also, a newline or end of file may trigger the insertion of a semicolon. While breaking the input into tokens, the next token is the longest sequence of characters that form a valid token.</p>\n<h3>字符序列</h3>\n<p><strong>字符序列</strong>构成了 Go语言的词汇表。\n有四大类：标识符、关键字、运算符和标点符号以及字母。\n空格（U+0020）、水平制表符（U+0009）、回车符（U+000D）和换行符（U+000A）都被当成空格处理。\n另外的，当这些字符将由单个字符组合成的<strong>字符序列</strong>分隔开来时它们才被当作自身处理。\n此外，换行符或文件结尾可能会触发插入分号。\n在将输入分解为<strong>字符序列</strong>时，下一个<strong>字符序列</strong>是构成有效<strong>字符序列</strong>的最长字符序列。</p>\n<p>词汇表：</p>\n<ul>\n<li>tokens：字符序列</li>\n<li>semicolon：分号</li>\n</ul>\n<h3>Semicolons</h3>\n<p>The formal grammar uses semicolons ”;” as terminators in a number of productions. Go programs may omit most of these semicolons using the following two rules:</p>\n<p>When the input is broken into tokens, a semicolon is automatically inserted into the token stream immediately after a line’s final token if that token is\nan identifier\nan integer, floating-point, imaginary, rune, or string literal\none of the keywords break, continue, fallthrough, or return\none of the operators and punctuation ++, —, ), ], or }\nTo allow complex statements to occupy a single line, a semicolon may be omitted before a closing ”)” or ”}“.\nTo reflect idiomatic use, code examples in this document elide semicolons using these rules.</p>\n<h3>分号</h3>\n<p><strong>形式语法</strong>在许多<strong>产生式</strong>中使用分号<code class=\"language-text\">;</code>作为<strong>终止符</strong>。Go程序可以使用以下两个规则省略这些分号中的大部分：</p>\n<ol>\n<li>\n<p>当输入被分解成字符序列时，如果某行的最后一个字符序列是空的，则会立即在该字符序列流中插入分号</p>\n<ul>\n<li>标识符。</li>\n<li>整数、浮点、虚值、符文或字符串文字。</li>\n<li>关键字之一 <code class=\"language-text\">break</code>、<code class=\"language-text\">continue</code>、<code class=\"language-text\">fallthrough</code> 或 <code class=\"language-text\">return</code>。</li>\n<li>运算符和标点符号<code class=\"language-text\">++</code>、<code class=\"language-text\">--</code>、<code class=\"language-text\">)</code>、<code class=\"language-text\">]</code>或<code class=\"language-text\">}</code>之一。</li>\n</ul>\n</li>\n<li>为了允许复杂语句占用一行，可以在结束<code class=\"language-text\">)</code>或<code class=\"language-text\">}</code>之前省略分号。</li>\n</ol>\n<p>为了反映惯用用法，本文中的代码示例省略了符合这些规则的分号。</p>\n<h3>Identifiers</h3>\n<p>Identifiers name program entities such as variables and types. An identifier is a sequence of one or more letters and digits. The first character in an identifier must be a letter.</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">identifier = letter { letter | unicode_digit } .</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">a\n_x9\nThisVariableIsExported\nαβ</code></pre></div>\n<p>Some identifiers are predeclared.</p>\n<h3>标识符</h3>\n<p>标识符命名程序实体，如变量和类型。标识符是一个或多个字母和数字的序列。标识符中的第一个字符必须是字母。</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">identifier = letter { letter | unicode_digit } .</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">a\n_x9\nThisVariableIsExported\nαβ</code></pre></div>\n<p>一些标识符是被预定义的。</p>\n<h3>Keywords</h3>\n<p>The following keywords are reserved and may not be used as identifiers.</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">break        default      func         interface    select\ncase         defer        go           map          struct\nchan         else         goto         package      switch\nconst        fallthrough  if           range        type\ncontinue     for          import       return       var</code></pre></div>\n<h3>关键字</h3>\n<p>以下关键字都是被保留的，不能作为标识符使用。</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">break        default      func         interface    select\ncase         defer        go           map          struct\nchan         else         goto         package      switch\nconst        fallthrough  if           range        type\ncontinue     for          import       return       var</code></pre></div>\n<h3>Operators and punctuation</h3>\n<p>The following character sequences represent operators (including assignment operators) and punctuation:</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">+    &amp;     +=    &amp;=     &amp;&amp;    ==    !=    (    )\n-    |     -=    |=     ||    &lt;     &lt;=    [    ]\n*    ^     *=    ^=     &lt;-    &gt;     &gt;=    {    }\n/    &lt;&lt;    /=    &lt;&lt;=    ++    =     :=    ,    ;\n%    &gt;&gt;    %=    &gt;&gt;=    --    !     ...   .    :\n     &amp;^          &amp;^=</code></pre></div>\n<h3>操作符和标点符号</h3>\n<p>以下各个字符序列就是操作符（包括赋值操作符）和标点符号：</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">+    &amp;     +=    &amp;=     &amp;&amp;    ==    !=    (    )\n-    |     -=    |=     ||    &lt;     &lt;=    [    ]\n*    ^     *=    ^=     &lt;-    &gt;     &gt;=    {    }\n/    &lt;&lt;    /=    &lt;&lt;=    ++    =     :=    ,    ;\n%    &gt;&gt;    %=    &gt;&gt;=    --    !     ...   .    :\n     &amp;^          &amp;^=</code></pre></div>","frontmatter":{"title":"Golang Spec","date":"2021-02-14T22:49:31.000Z","description":null}},"previous":{"fields":{"slug":"/面试一文就够/2021-02-13-传输控制协议TCP/"},"frontmatter":{"title":"传输控制协议TCP","slug":"tcp-note"}},"next":{"fields":{"slug":"/数据结构/线性表/线性表抽象定义/"},"frontmatter":{"title":"线性表抽象定义","slug":"sq-list-adt"}}},"pageContext":{"id":"7599da0c-6ddc-58e8-b4d3-5e9890b778c8","previousPostId":"0d9e7ded-8822-5b83-abcb-2252208e9ce4","nextPostId":"608a39fc-a2ef-5021-b063-3afe3cb2e3a1"}},"staticQueryHashes":["2841359383","394414991"]}