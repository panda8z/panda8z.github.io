{"componentChunkName":"component---src-templates-blog-post-js","path":"/go-program-pattern-visitor","result":{"data":{"site":{"siteMetadata":{"title":"Panda8z`s Blog"}},"markdownRemark":{"id":"9b2efd6a-e370-56d8-8a92-7353653129cc","excerpt":"img 本篇文章主要想讨论一下，Kubernetes 的  命令中的使用到到的一个编程模式 – Visitor（注：其实， 主要使用到了两个一个是Builder，另一个是Visitor）。本来，Visitor 是面向对象设计模英中一个很重要的设计模款（参看Wikipedia Visitor Pattern…","html":"<p><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.k8s-265x300.png\" alt=\"img\"></p>\n<p>本篇文章主要想讨论一下，Kubernetes 的 <code class=\"language-text\">kubectl</code> 命令中的使用到到的一个编程模式 – Visitor（注：其实，<code class=\"language-text\">kubectl</code> 主要使用到了两个一个是Builder，另一个是Visitor）。本来，Visitor 是面向对象设计模英中一个很重要的设计模款（参看Wikipedia<a href=\"https://en.wikipedia.org/wiki/Visitor_pattern\"> Visitor Pattern词条</a>），这个模式是一种将算法与操作对象的结构分离的一种方法。这种分离的实际结果是能够在不修改结构的情况下向现有对象结构添加新操作，是遵循开放/封闭原则的一种方法。这篇文章我们重点看一下 <code class=\"language-text\">kubelet</code> 中是怎么使用函数式的方法来实现这个模式的。</p>\n<h2>一个简单示例</h2>\n<p>我们还是先来看一个简单设计模式的Visitor的示例。</p>\n<ul>\n<li>我们的代码中有一个<code class=\"language-text\">Visitor</code>的函数定义，还有一个<code class=\"language-text\">Shape</code>接口，其需要使用 <code class=\"language-text\">Visitor</code>函数做为参数。</li>\n<li>我们的实例的对象 <code class=\"language-text\">Circle</code>和 <code class=\"language-text\">Rectangle</code>实现了 <code class=\"language-text\">Shape</code> 的接口的 <code class=\"language-text\">accept()</code> 方法，这个方法就是等外面给我传递一个Visitor。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"encoding/json\"</span>\n    <span class=\"token string\">\"encoding/xml\"</span>\n    <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> Visitor <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>shape Shape<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> Shape <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>Visitor<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Circle <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Radius <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Circle<span class=\"token punctuation\">)</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>v Visitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Rectangle <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Width<span class=\"token punctuation\">,</span> Heigh <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r Rectangle<span class=\"token punctuation\">)</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>v Visitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后，我们实现两个Visitor，一个是用来做JSON序列化的，另一个是用来做XML序列化的</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">JsonVisitor</span><span class=\"token punctuation\">(</span>shape Shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    bytes<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">XmlVisitor</span><span class=\"token punctuation\">(</span>shape Shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    bytes<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下面是我们的使用Visitor这个模式的代码</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  c <span class=\"token operator\">:=</span> Circle<span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n  r <span class=\"token operator\">:=</span>  Rectangle<span class=\"token punctuation\">{</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">}</span>\n  shapes <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Shape<span class=\"token punctuation\">{</span>c<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> shapes <span class=\"token punctuation\">{</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>JsonVisitor<span class=\"token punctuation\">)</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>XmlVisitor<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其实，这段代码的目的就是想解耦 数据结构和 算法，使用 Strategy 模式也是可以完成的，而且会比较干净。<strong>但是在有些情况下，多个Visitor是来访问一个数据结构的不同部分，这种情况下，数据结构有点像一个数据库，而各个Visitor会成为一个个小应用。</strong> <code class=\"language-text\">kubectl</code>就是这种情况。</p>\n<h2>k8s相关背景</h2>\n<p>接下来，我们再来了解一下相关的知识背景：</p>\n<ul>\n<li>对于Kubernetes，其抽象了很多种的Resource，比如：Pod, ReplicaSet, ConfigMap, Volumes, Namespace, Roles …. 种类非常繁多，这些东西构成为了Kubernetes的数据模型（点击 <a href=\"https://github.com/kubernauts/practical-kubernetes-problems/blob/master/images/k8s-resources-map.png\">Kubernetes Resources 地图</a> 查看其有多复杂）</li>\n<li><code class=\"language-text\">kubectl</code> 是Kubernetes中的一个客户端命令，操作人员用这个命令来操作Kubernetes。<code class=\"language-text\">kubectl</code> 会联系到 Kubernetes 的API Server，API Server会联系每个节点上的 <code class=\"language-text\">kubelet</code> ，从而达到控制每个结点。</li>\n<li><code class=\"language-text\">kubectl</code> 主要的工作是处理用户提交的东西（包括，命令行参数，yaml文件等），然后其会把用户提交的这些东西组织成一个数据结构体，然后把其发送给 API Server。</li>\n<li>相关的源代码在 <code class=\"language-text\">src/k8s.io/cli-runtime/pkg/resource/visitor.go</code> 中（<a href=\"https://github.com/kubernetes/kubernetes/blob/cea1d4e20b4a7886d8ff65f34c6d4f95efcb4742/staging/src/k8s.io/cli-runtime/pkg/resource/visitor.go\">源码链接</a>）</li>\n</ul>\n<p><code class=\"language-text\">kubectl</code> 的代码比较复杂，不过，其本原理简单来说，<strong>它从命令行和yaml文件中获取信息，通过Builder模式并把其转成一系列的资源，最后用 Visitor 模式模式来迭代处理这些Reources</strong>。</p>\n<p>下面我们来看看 <code class=\"language-text\">kubectl</code> 的实现，为了简化，我用一个小的示例来表明 ，而不是直接分析复杂的源码。</p>\n<h2>kubectl的实现方法</h2>\n<h3>Visitor模式定义</h3>\n<p>首先，<code class=\"language-text\">kubectl</code> 主要是用来处理 <code class=\"language-text\">Info</code>结构体，下面是相关的定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> VisitorFunc <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Info<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n<span class=\"token keyword\">type</span> Visitor <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>VisitorFunc<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Info <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Namespace   <span class=\"token builtin\">string</span>\n    Name        <span class=\"token builtin\">string</span>\n    OtherThings <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>info <span class=\"token operator\">*</span>Info<span class=\"token punctuation\">)</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>fn VisitorFunc<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们可以看到，</p>\n<ul>\n<li>有一个 <code class=\"language-text\">VisitorFunc</code> 的函数类型的定义</li>\n<li>一个 <code class=\"language-text\">Visitor</code> 的接口，其中需要 <code class=\"language-text\">Visit(VisitorFunc) error</code> 的方法（这就像是我们上面那个例子的 <code class=\"language-text\">Shape</code> ）</li>\n<li>最后，为<code class=\"language-text\">Info</code> 实现 <code class=\"language-text\">Visitor</code> 接口中的 <code class=\"language-text\">Visit()</code> 方法，实现就是直接调用传进来的方法（与前面的例子相仿）</li>\n</ul>\n<p>我们再来定义几种不同类型的 Visitor。</p>\n<h3>Name Visitor</h3>\n<p>这个Visitor 主要是用来访问 <code class=\"language-text\">Info</code> 结构中的 <code class=\"language-text\">Name</code> 和 <code class=\"language-text\">NameSpace</code> 成员</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> NameVisitor <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  visitor Visitor\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v NameVisitor<span class=\"token punctuation\">)</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>fn VisitorFunc<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span>visitor<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>info <span class=\"token operator\">*</span>Info<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NameVisitor() before call function\"</span><span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==> Name=%s, NameSpace=%s\\n\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>Namespace<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NameVisitor() after call function\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> err\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们可以看到，上面的代码：</p>\n<ul>\n<li>声明了一个 <code class=\"language-text\">NameVisitor</code> 的结构体，这个结构体里有一个 <code class=\"language-text\">Visitor</code> 接口成员，这里意味着多态。</li>\n<li>在实现 <code class=\"language-text\">Visit()</code> 方法时，其调用了自己结构体内的那个 <code class=\"language-text\">Visitor</code>的 <code class=\"language-text\">Visitor()</code> 方法，这其实是一种修饰器的模式，用另一个Visitor修饰了自己（关于修饰器模式，参看《<a href=\"https://coolshell.cn/articles/17929.html\">Go编程模式：修饰器</a>》）</li>\n</ul>\n<h3>Other Visitor</h3>\n<p>这个Visitor主要用来访问 <code class=\"language-text\">Info</code> 结构中的 <code class=\"language-text\">OtherThings</code> 成员</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> OtherThingsVisitor <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  visitor Visitor\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v OtherThingsVisitor<span class=\"token punctuation\">)</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>fn VisitorFunc<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span>visitor<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>info <span class=\"token operator\">*</span>Info<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OtherThingsVisitor() before call function\"</span><span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==> OtherThings=%s\\n\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>OtherThings<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OtherThingsVisitor() after call function\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> err\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>实现逻辑同上，我就不再重新讲了</p>\n<h3>Log Visitor</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> LogVisitor <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  visitor Visitor\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v LogVisitor<span class=\"token punctuation\">)</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>fn VisitorFunc<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span>visitor<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>info <span class=\"token operator\">*</span>Info<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LogVisitor() before call function\"</span><span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LogVisitor() after call function\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> err\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>使用方代码</h3>\n<p>现在我们看看如果使用上面的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  info <span class=\"token operator\">:=</span> Info<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> v Visitor <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>info\n  v <span class=\"token operator\">=</span> LogVisitor<span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">}</span>\n  v <span class=\"token operator\">=</span> NameVisitor<span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">}</span>\n  v <span class=\"token operator\">=</span> OtherThingsVisitor<span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">}</span>\n  loadFile <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>info <span class=\"token operator\">*</span>Info<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    info<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Hao Chen\"</span>\n    info<span class=\"token punctuation\">.</span>Namespace <span class=\"token operator\">=</span> <span class=\"token string\">\"MegaEase\"</span>\n    info<span class=\"token punctuation\">.</span>OtherThings <span class=\"token operator\">=</span> <span class=\"token string\">\"We are running as remote team.\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n  <span class=\"token punctuation\">}</span>\n  v<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>loadFile<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码，我们可以看到</p>\n<ul>\n<li>Visitor们一层套一层</li>\n<li>我用 <code class=\"language-text\">loadFile</code> 假装从文件中读如数据</li>\n<li>最后一条 <code class=\"language-text\">v.Visit(loadfile)</code> 我们上面的代码就全部开始激活工作了。</li>\n</ul>\n<p>上面的代码输出如下的信息，你可以看到代码的执行顺序是怎么执行起来了</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">LogVisitor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> before call <span class=\"token keyword\">function</span>\nNameVisitor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> before call <span class=\"token keyword\">function</span>\nOtherThingsVisitor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> before call <span class=\"token keyword\">function</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">></span> <span class=\"token assign-left variable\">OtherThings</span><span class=\"token operator\">=</span>We are running as remote team.\nOtherThingsVisitor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> after call <span class=\"token keyword\">function</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">></span> <span class=\"token assign-left variable\">Name</span><span class=\"token operator\">=</span>Hao Chen, <span class=\"token assign-left variable\">NameSpace</span><span class=\"token operator\">=</span>MegaEase\nNameVisitor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> after call <span class=\"token keyword\">function</span>\nLogVisitor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> after call <span class=\"token keyword\">function</span></code></pre></div>\n<p>我们可以看到，上面的代码有以下几种功效：</p>\n<ul>\n<li>解耦了数据和程序。</li>\n<li>使用了修饰器模式</li>\n<li>还做出来pipeline的模式</li>\n</ul>\n<p>所以，其实，我们是可以把上面的代码重构一下的。</p>\n<h3>Visitor修饰器</h3>\n<p>下面，我们用<a href=\"https://coolshell.cn/articles/17929.html\">修饰器模式</a>来重构一下上面的代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> DecoratedVisitor <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  visitor    Visitor\n  decorators <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>VisitorFunc\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewDecoratedVisitor</span><span class=\"token punctuation\">(</span>v Visitor<span class=\"token punctuation\">,</span> fn <span class=\"token operator\">...</span>VisitorFunc<span class=\"token punctuation\">)</span> Visitor <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> v\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> DecoratedVisitor<span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Visit implements Visitor</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v DecoratedVisitor<span class=\"token punctuation\">)</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>fn VisitorFunc<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span>visitor<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>info <span class=\"token operator\">*</span>Info<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> err\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> err\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> v<span class=\"token punctuation\">.</span>decorators <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> v<span class=\"token punctuation\">.</span>decorators<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> err\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码并不复杂，</p>\n<ul>\n<li>用一个 <code class=\"language-text\">DecoratedVisitor</code> 的结构来存放所有的<code class=\"language-text\">VistorFunc</code>函数</li>\n<li><code class=\"language-text\">NewDecoratedVisitor</code> 可以把所有的 <code class=\"language-text\">VisitorFunc</code>转给它，构造 <code class=\"language-text\">DecoratedVisitor</code> 对象。</li>\n<li><code class=\"language-text\">DecoratedVisitor</code>实现了 <code class=\"language-text\">Visit()</code> 方法，里面就是来做一个for-loop，顺着调用所有的 <code class=\"language-text\">VisitorFunc</code></li>\n</ul>\n<p>于是，我们的代码就可以这样运作了：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">info <span class=\"token operator\">:=</span> Info<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> v Visitor <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>info\nv <span class=\"token operator\">=</span> <span class=\"token function\">NewDecoratedVisitor</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> NameVisitor<span class=\"token punctuation\">,</span> OtherVisitor<span class=\"token punctuation\">)</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>LoadFile<span class=\"token punctuation\">)</span></code></pre></div>\n<p>是不是比之前的那个简单？注意，这个<code class=\"language-text\">DecoratedVisitor</code> 同样可以成为一个Visitor来使用。</p>\n<p>好，上面的这些代码全部存在于 <code class=\"language-text\">kubectl</code> 的代码中，你看懂了这里面的代码逻辑，相信你也能够看懂 <code class=\"language-text\">kubectl</code> 的代码了。</p>\n<p>（全文完）</p>\n<p>转载：文章作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 – CoolShell</a></p>\n<p><img src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\" alt=\"img\" style=\"zoom:33%;\"> <img src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" alt=\"img\" style=\"zoom:33%;\">\n关注CoolShell微信公众账号和微信小程序</p>","frontmatter":{"title":"GO 编程模式09：K8S VISITOR 模式","date":"2021-01-24T11:09:00.000Z","description":null}},"previous":{"fields":{"slug":"/Go编程模式-转载自酷壳/GO编程模式：PIPELINE/"},"frontmatter":{"title":"GO编程模式08：PIPELINE","slug":"go-program-pattern-pipeline"}},"next":{"fields":{"slug":"/2021-01-24-RTL名词解释/"},"frontmatter":{"title":"RTL名词解释","slug":"alphabet-RTL"}}},"pageContext":{"id":"9b2efd6a-e370-56d8-8a92-7353653129cc","previousPostId":"7c6f2bca-c711-5f81-bef3-94e459c3e3b8","nextPostId":"1abc30ff-a463-574f-9785-c2b3dceb4ed2"}},"staticQueryHashes":["2841359383","394414991"]}