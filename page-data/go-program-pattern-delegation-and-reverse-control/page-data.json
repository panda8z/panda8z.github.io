{"componentChunkName":"component---src-templates-blog-post-js","path":"/go-program-pattern-delegation-and-reverse-control","result":{"data":{"site":{"siteMetadata":{"title":"Panda8z`s Blog"}},"markdownRemark":{"id":"9dec1a03-1f93-52fc-ae60-ce8a979dbc03","excerpt":"img 图片来源：GopherSource 反转控制IoC – Inversion of Control 是一种软件设计的方法，其主要的思想是把控制逻辑与业务逻辑分享，不要在业务逻辑里写控制逻辑，这样会让控制逻辑依赖于业务逻辑，而是反过来，让业务逻辑依赖控制逻辑。在《IoC/DIP…","html":"<p><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.pair_-300x298.png\" alt=\"img\"></p>\n<p>图片来源：<a href=\"https://gophersource.com/\">GopherSource</a></p>\n<p>反转控制<a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\">IoC – Inversion of Control</a> 是一种软件设计的方法，其主要的思想是把控制逻辑与业务逻辑分享，不要在业务逻辑里写控制逻辑，这样会让控制逻辑依赖于业务逻辑，而是反过来，让业务逻辑依赖控制逻辑。在《<a href=\"https://coolshell.cn/articles/9949.html\">IoC/DIP其实是一种管理思想</a>》中的那个开关和电灯的示例一样，开关是控制逻辑，电器是业务逻辑，不要在电器中实现开关，而是把开关抽象成一种协议，让电器都依赖之。这样的编程方式可以有效的降低程序复杂度，并提升代码重用。</p>\n<h2>嵌入和委托</h2>\n<h3>结构体嵌入</h3>\n<p>在Go语言中，我们可以很方便的把一个结构体给嵌到另一个结构体中。如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Widget <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    X<span class=\"token punctuation\">,</span> Y <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Label <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Widget        <span class=\"token comment\">// Embedding (delegation)</span>\n    Text   <span class=\"token builtin\">string</span> <span class=\"token comment\">// Aggregation</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的示例中，我们把 <code class=\"language-text\">Widget</code>嵌入到了 <code class=\"language-text\">Label</code> 中，于是，我们可以这样使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">label <span class=\"token operator\">:=</span> Label<span class=\"token punctuation\">{</span>Widget<span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"State:\"</span><span class=\"token punctuation\">}</span>\nlabel<span class=\"token punctuation\">.</span>X <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\nlabel<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">=</span> <span class=\"token number\">12</span></code></pre></div>\n<p>如果在 <code class=\"language-text\">Label</code> 结构体里出现了重名，就需要解决重名，例如，如果 成员 <code class=\"language-text\">X</code> 重名，用 <code class=\"language-text\">label.X</code>表明 是自己的<code class=\"language-text\">X</code> ，用 <code class=\"language-text\">label.Wedget.X</code> 表示嵌入过来的。</p>\n<p>有了这样的嵌入，就可以像UI组件一样的在结构构的设计上进行层层分解。比如，我可以新出来两个结构体 <code class=\"language-text\">Button</code> 和 <code class=\"language-text\">ListBox</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Button <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Label <span class=\"token comment\">// Embedding (delegation)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> ListBox <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Widget          <span class=\"token comment\">// Embedding (delegation)</span>\n    Texts  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token comment\">// Aggregation</span>\n    Index  <span class=\"token builtin\">int</span>      <span class=\"token comment\">// Aggregation</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>方法重写</h3>\n<p>然后，我们需要两个接口 <code class=\"language-text\">Painter</code> 用于把组件画出来，<code class=\"language-text\">Clicker</code> 用于表明点击事件：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Painter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Paint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Clicker <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，</p>\n<ul>\n<li>对于 <code class=\"language-text\">Lable</code> 来说，只有 <code class=\"language-text\">Painter</code> ，没有<code class=\"language-text\">Clicker</code></li>\n<li>对于 <code class=\"language-text\">Button</code> 和 <code class=\"language-text\">ListBox</code>来说，<code class=\"language-text\">Painter</code> 和<code class=\"language-text\">Clicker</code>都有。</li>\n</ul>\n<p>下面是一些实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>label Label<span class=\"token punctuation\">)</span> <span class=\"token function\">Paint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p:Label.Paint(%q)\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>label<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//因为这个接口可以通过 Label 的嵌入带到新的结构体，</span>\n<span class=\"token comment\">//所以，可以在 Button 中可以重载这个接口方法以</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>button Button<span class=\"token punctuation\">)</span> <span class=\"token function\">Paint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Override</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Button.Paint(%s)\\n\"</span><span class=\"token punctuation\">,</span> button<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>button Button<span class=\"token punctuation\">)</span> <span class=\"token function\">Click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Button.Click(%s)\\n\"</span><span class=\"token punctuation\">,</span> button<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>listBox ListBox<span class=\"token punctuation\">)</span> <span class=\"token function\">Paint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ListBox.Paint(%q)\\n\"</span><span class=\"token punctuation\">,</span> listBox<span class=\"token punctuation\">.</span>Texts<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>listBox ListBox<span class=\"token punctuation\">)</span> <span class=\"token function\">Click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ListBox.Click(%q)\\n\"</span><span class=\"token punctuation\">,</span> listBox<span class=\"token punctuation\">.</span>Texts<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里，需要重点提示一下，<strong><code class=\"language-text\">Button.Paint()</code> 接口可以通过 Label 的嵌入带到新的结构体，如果 <code class=\"language-text\">Button.Paint()</code> 不实现的话，会调用 <code class=\"language-text\">Label.Paint()</code> ，所以，在 <code class=\"language-text\">Button</code> 中声明 <code class=\"language-text\">Paint()</code> 方法，相当于Override</strong>。</p>\n<h3>嵌入结构多态</h3>\n<p>通过下面的程序可以看到，整个多态是怎么执行的。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">button1 <span class=\"token operator\">:=</span> Button<span class=\"token punctuation\">{</span>Label<span class=\"token punctuation\">{</span>Widget<span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\nbutton2 <span class=\"token operator\">:=</span> <span class=\"token function\">NewButton</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cancel\"</span><span class=\"token punctuation\">)</span>\nlistBox <span class=\"token operator\">:=</span> ListBox<span class=\"token punctuation\">{</span>Widget<span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"AL\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AK\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AZ\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AR\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> painter <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Painter<span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">,</span> listBox<span class=\"token punctuation\">,</span> button1<span class=\"token punctuation\">,</span> button2<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    painter<span class=\"token punctuation\">.</span><span class=\"token function\">Paint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> widget <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">,</span> listBox<span class=\"token punctuation\">,</span> button1<span class=\"token punctuation\">,</span> button2<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n  widget<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>Painter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Paint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> clicker<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> widget<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>Clicker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n    clicker<span class=\"token punctuation\">.</span><span class=\"token function\">Click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// print a empty line </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们可以看到，我们可以使用接口来多态，也可以使用 泛型的 <code class=\"language-text\">interface{}</code> 来多态，但是需要有一个类型转换。</p>\n<h2>反转控制</h2>\n<p>我们再来看一个示例，我们有一个存放整数的数据结构，如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> IntSet <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    data <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewIntSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> IntSet <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> IntSet<span class=\"token punctuation\">{</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>set <span class=\"token operator\">*</span>IntSet<span class=\"token punctuation\">)</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    set<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>set <span class=\"token operator\">*</span>IntSet<span class=\"token punctuation\">)</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>set <span class=\"token operator\">*</span>IntSet<span class=\"token punctuation\">)</span> <span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> set<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中实现了 <code class=\"language-text\">Add()</code> 、<code class=\"language-text\">Delete()</code> 和 <code class=\"language-text\">Contains()</code> 三个操作，前两个是写操作，后一个是读操作。</p>\n<h3>实现Undo功能</h3>\n<p>现在我们想实现一个 Undo 的功能。我们可以把把 <code class=\"language-text\">IntSet</code> 再包装一下变成 <code class=\"language-text\">UndoableIntSet</code> 代码如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> UndoableIntSet <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Poor style</span>\n    IntSet    <span class=\"token comment\">// Embedding (delegation)</span>\n    functions <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewUndoableIntSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> UndoableIntSet <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> UndoableIntSet<span class=\"token punctuation\">{</span><span class=\"token function\">NewIntSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>set <span class=\"token operator\">*</span>UndoableIntSet<span class=\"token punctuation\">)</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Override</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        set<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        set<span class=\"token punctuation\">.</span>functions <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        set<span class=\"token punctuation\">.</span>functions <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>set <span class=\"token operator\">*</span>UndoableIntSet<span class=\"token punctuation\">)</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Override</span>\n    <span class=\"token keyword\">if</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n        set<span class=\"token punctuation\">.</span>functions <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        set<span class=\"token punctuation\">.</span>functions <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>set <span class=\"token operator\">*</span>UndoableIntSet<span class=\"token punctuation\">)</span> <span class=\"token function\">Undo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No functions to undo\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    index <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">if</span> function <span class=\"token operator\">:=</span> set<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> function <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        set<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span> <span class=\"token comment\">// For garbage collection</span>\n    <span class=\"token punctuation\">}</span>\n\n    set<span class=\"token punctuation\">.</span>functions <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>index<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在上面的代码中，我们可以看到</p>\n<ul>\n<li>我们在 <code class=\"language-text\">UndoableIntSet</code> 中嵌入了<code class=\"language-text\">IntSet</code> ，然后Override了 它的 <code class=\"language-text\">Add()</code>和 <code class=\"language-text\">Delete()</code> 方法。</li>\n<li><code class=\"language-text\">Contains()</code> 方法没有Override，所以，会被带到 <code class=\"language-text\">UndoableInSet</code> 中来了。</li>\n<li>在Override的 <code class=\"language-text\">Add()</code>中，记录 <code class=\"language-text\">Delete</code> 操作</li>\n<li>在Override的 <code class=\"language-text\">Delete()</code> 中，记录 <code class=\"language-text\">Add</code> 操作</li>\n<li>在新加入 <code class=\"language-text\">Undo()</code> 中进行Undo操作。</li>\n</ul>\n<p>通过这样的方式来为已有的代码扩展新的功能是一个很好的选择，这样，可以在重用原有代码功能和重新新的功能中达到一个平衡。但是，这种方式最大的问题是，Undo操作其实是一种控制逻辑，并不是业务逻辑，所以，在复用 Undo这个功能上是有问题。因为其中加入了大量跟 <code class=\"language-text\">IntSet</code> 相关的业务逻辑。</p>\n<h3>反转依赖</h3>\n<p>现在我们来看另一种方法：</p>\n<p>我们先声明一种函数接口，表现我们的Undo控制可以接受的函数签名是什么样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Undo <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>有了上面这个协议后，我们的Undo控制逻辑就可以写成如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>undo <span class=\"token operator\">*</span>Undo<span class=\"token punctuation\">)</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>function <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">*</span>undo <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>undo<span class=\"token punctuation\">,</span> function<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>undo <span class=\"token operator\">*</span>Undo<span class=\"token punctuation\">)</span> <span class=\"token function\">Undo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n  functions <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span>undo\n  <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>functions<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No functions to undo\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  index <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>functions<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">if</span> function <span class=\"token operator\">:=</span> functions<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> function <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    functions<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span> <span class=\"token comment\">// For garbage collection</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token operator\">*</span>undo <span class=\"token operator\">=</span> functions<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>index<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里你不必觉得奇怪， <code class=\"language-text\">Undo</code> 本来就是一个类型，不必是一个结构体，是一个函数数组也没什么问题。</p>\n<p>然后，我们在我们的IntSet里嵌入 Undo，然后，再在 <code class=\"language-text\">Add()</code> 和 <code class=\"language-text\">Delete()</code> 里使用上面的方法，就可以完成功能。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> IntSet <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    data <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span>\n    undo Undo\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewIntSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> IntSet <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> IntSet<span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>set <span class=\"token operator\">*</span>IntSet<span class=\"token punctuation\">)</span> <span class=\"token function\">Undo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> set<span class=\"token punctuation\">.</span>undo<span class=\"token punctuation\">.</span><span class=\"token function\">Undo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>set <span class=\"token operator\">*</span>IntSet<span class=\"token punctuation\">)</span> <span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> set<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>set <span class=\"token operator\">*</span>IntSet<span class=\"token punctuation\">)</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        set<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        set<span class=\"token punctuation\">.</span>undo<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        set<span class=\"token punctuation\">.</span>undo<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>set <span class=\"token operator\">*</span>IntSet<span class=\"token punctuation\">)</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n        set<span class=\"token punctuation\">.</span>undo<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        set<span class=\"token punctuation\">.</span>undo<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个就是控制反转，不再由 控制逻辑 <code class=\"language-text\">Undo</code> 来依赖业务逻辑 <code class=\"language-text\">IntSet</code>，而是由业务逻辑 <code class=\"language-text\">IntSet</code> 来依赖 <code class=\"language-text\">Undo</code> 。其依赖的是其实是一个协议，这个协议是一个没有参数的函数数组。我们也可以看到，我们 Undo 的代码就可以复用了。</p>\n<p>（全文完）</p>\n<p>转载：文章作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 – CoolShell</a></p>\n<p><img src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\" alt=\"img\" style=\"zoom:33%;\"> <img src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" alt=\"img\" style=\"zoom:33%;\">\n关注CoolShell微信公众账号和微信小程序</p>","frontmatter":{"title":"GO编程模式04：委托和反转控制","date":"2021-01-24T11:04:00.000Z","description":null}},"previous":{"fields":{"slug":"/Go编程模式-转载自酷壳/GO 编程模式：FUNCTIONAL OPTIONS/"},"frontmatter":{"title":"GO 编程模式03：FUNCTIONAL OPTIONS","slug":"go-program-pattern-functional-options"}},"next":{"fields":{"slug":"/Go编程模式-转载自酷壳/GO编程模式：MAP-REDUCE/"},"frontmatter":{"title":"GO编程模式05：MAP-REDUCE","slug":"go-program-pattern-map-reduce"}}},"pageContext":{"id":"9dec1a03-1f93-52fc-ae60-ce8a979dbc03","previousPostId":"c4e4fd37-3de3-5230-9b2f-54222199a4f6","nextPostId":"4e2b5e42-3ea9-5207-ac6d-a067b67d3938"}},"staticQueryHashes":["2841359383","394414991"]}