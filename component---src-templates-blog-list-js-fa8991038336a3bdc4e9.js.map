{"version":3,"sources":["webpack:///./src/templates/blog-list.js"],"names":["BlogIndex","props","console","log","state","render","data","this","siteTitle","site","siteMetadata","title","siteKeywords","keywords","posts","allMarkdownRemark","edges","pageContext","currentPage","numPages","isFirst","isLast","prevPageUrl","Number","toString","nextPageUrl","location","style","listStyle","padding","marginTop","map","node","url","frontmatter","slug","fields","key","className","itemScope","itemType","to","itemProp","date","dangerouslySetInnerHTML","__html","excerpt","display","flexWrap","justifyContent","alignItems","listStyleType","height","rel","Array","from","length","_","i","margin","textDecoration","color","background","React","Component"],"mappings":"gOAOqBA,E,YAEnB,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,KACAC,QAAQC,IAAI,qBAAsBF,GAClC,EAAKA,MAAQA,EACb,EAAKG,MAAQ,GAJI,E,oCASnBC,OAAA,WACE,IAAQC,EAASC,KAAKN,MAAdK,KACFE,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAeN,EAAKG,KAAKC,aAAaG,SACtCC,EAAQR,EAAKS,kBAAkBC,MACrC,EAAkCT,KAAKN,MAAMgB,YAArCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAc,SAAWC,OAAOL,EAAc,GAAGM,WACjDC,EAAc,SAAWF,OAAOL,EAAc,GAAGM,WAEvD,OACE,kBAAC,IAAD,CAAQE,SAAUnB,KAAKN,MAAMyB,SAAUf,MAAOH,GAC5C,kBAAC,IAAD,CAAKG,MAAOH,EAAWK,SAAUD,IACjC,kBAAC,IAAD,MACA,wBAAIe,MAAO,CAAEC,UAAW,OAAQC,QAAS,EAAGC,UAAW,SACpDhB,EAAMiB,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ9B,QAAQC,IAAI6B,GACZ,IAAMC,EAAM,KAAOD,EAAKE,YAAYC,MAAQH,EAAKI,OAAOD,MACxD,OACE,wBAAIE,IAAKJ,GACP,6BACEK,UAAU,iBACVC,WAAS,EACTC,SAAS,6BACT,gCACE,4BACE,kBAAC,OAAD,CAAMC,GAAIR,EAAKS,SAAS,OACtB,0BAAMA,SAAS,YAAYV,EAAKE,YAAYvB,SAGhD,+BAAQqB,EAAKE,YAAYS,OAE3B,uBAAGC,wBAAyB,CAAEC,OAAQb,EAAKc,iBAMrD,wBACEnB,MAAO,CACLoB,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,WAAY,SACZC,cAAe,OACfC,OAAQ,OACRvB,QAAS,KAGTT,GACA,kBAAC,OAAD,CAAMqB,GAAInB,EAAa+B,IAAI,QAA3B,mBAIDC,MAAMC,KAAK,CAAEC,OAAQrC,IAAY,SAACsC,EAAGC,GAAJ,OAChC,wBACErB,IAAG,qBAAsBqB,EAAI,GAC7B/B,MAAO,CACLgC,OAAQ,IAGV,kBAAC,OAAD,CACElB,GAAE,UAAWiB,EAAI,GACjB/B,MAAO,CACLE,QAAS,SACT+B,eAAgB,OAChBC,MAAOH,EAAI,IAAMxC,EAAc,UAAY,GAC3C4C,WAAYJ,EAAI,IAAMxC,EAAc,UAAY,KAGjDwC,EAAI,QAITrC,GACA,kBAAC,OAAD,CAAMoB,GAAIhB,EAAa4B,IAAI,QAA3B,kB,GAvF2BU,IAAMC","file":"component---src-templates-blog-list-js-fa8991038336a3bdc4e9.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Bio from '../components/bio'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo';\n\nexport default class BlogIndex extends React.Component {\n\n  constructor(props) {\n    super(props)\n    console.log('BlogIndex props = ', props)\n    this.props = props\n    this.state = {\n\n    }\n  }\n\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const siteKeywords = data.site.siteMetadata.keywords\n    const posts = data.allMarkdownRemark.edges\n    const { currentPage, numPages } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPageUrl = '/list-' + Number(currentPage - 1).toString()\n    const nextPageUrl = '/list-' + Number(currentPage + 1).toString()\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title={siteTitle} keywords={siteKeywords} />\n        <Bio />\n        <ul style={{ listStyle: 'none', padding: 0, marginTop: '30px' }}>\n          {posts.map(({ node }) => {\n            console.log(node)\n            const url = '/' + (node.frontmatter.slug || node.fields.slug)\n            return (\n              <li key={url} >\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\">\n                  <header>\n                    <h2>\n                      <Link to={url} itemProp=\"url\">\n                        <span itemProp=\"headline\">{node.frontmatter.title}</span>\n                      </Link>\n                    </h2>\n                    <small>{node.frontmatter.date}</small>\n                  </header>\n                  <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n                </article>\n              </li>\n            )\n          })}\n        </ul>\n        <ul\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            listStyleType: 'none',\n            height: '1rem',\n            padding: 0,\n          }}\n        >\n          {!isFirst && (\n            <Link to={prevPageUrl} rel=\"prev\">\n              ← Previous Page\n            </Link>\n          )}\n          {Array.from({ length: numPages }, (_, i) => (\n            <li\n              key={`pagination-number${i + 1}`}\n              style={{\n                margin: 0,\n              }}\n            >\n              <Link\n                to={`/list-${i + 1}`}\n                style={{\n                  padding: \"0.5rem\",\n                  textDecoration: 'none',\n                  color: i + 1 === currentPage ? '#ffffff' : '',\n                  background: i + 1 === currentPage ? '#007acc' : '',\n                }}\n              >\n                {i + 1}\n              </Link>\n            </li>\n          ))}\n          {!isLast && (\n            <Link to={nextPageUrl} rel=\"next\">\n              Next Page →\n            </Link>\n          )}\n        </ul>\n      </Layout >\n    )\n  }\n}\n\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {frontmatter: {draft: {ne: true}}}\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            slug\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}