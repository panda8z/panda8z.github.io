{"componentChunkName":"component---src-templates-blog-post-js","path":"/go-program-pattern-functional-options","result":{"data":{"site":{"siteMetadata":{"title":"Panda8z`s Blog"}},"markdownRemark":{"id":"c4e4fd37-3de3-5230-9b2f-54222199a4f6","excerpt":"img 在本篇文章中，我们来讨论一下 Functional Options 这个编程模式。这是一个函数式编程的应用案例，编程技巧也很好，是目前在Go…","html":"<p><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.options-300x186.png\" alt=\"img\"></p>\n<p>在本篇文章中，我们来讨论一下 <strong>Functional Options</strong> 这个编程模式。这是一个函数式编程的应用案例，编程技巧也很好，是目前在Go语言中最流行的一种编程模式。但是，在我们正式讨论这个模式之前，我们需要先来看看要解决什么样的问题。</p>\n<h2>配置选项问题</h2>\n<p>在我们编程中，我们会经常性的需要对一个对象（或是业务实体）进行相关的配置。比如下面这个业务实体（注意，这仅只是一个示例）：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Server <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Addr     <span class=\"token builtin\">string</span>\n    Port     <span class=\"token builtin\">int</span>\n    Protocol <span class=\"token builtin\">string</span>\n    Timeout  time<span class=\"token punctuation\">.</span>Duration\n    MaxConns <span class=\"token builtin\">int</span>\n    TLS      <span class=\"token operator\">*</span>tls<span class=\"token punctuation\">.</span>Config\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这个 <code class=\"language-text\">Server</code> 对象中，我们可以看到：</p>\n<ul>\n<li>要有侦听的IP地址 <code class=\"language-text\">Addr</code> 和端口号 <code class=\"language-text\">Port</code> ，这两个配置选项是必填的（当然，IP地址和端口号都可以有默认值，当这里我们用于举例认为是没有默认值，而且不能为空，需要必填的）。</li>\n<li>然后，还有协议 <code class=\"language-text\">Protocol</code> 、 <code class=\"language-text\">Timeout</code> 和<code class=\"language-text\">MaxConns</code> 字段，这几个字段是不能为空的，但是有默认值的，比如：协议是<code class=\"language-text\">tcp</code>, 超时<code class=\"language-text\">30</code>秒 和 最大链接数<code class=\"language-text\">1024</code>个。</li>\n<li>还有一个 <code class=\"language-text\">TLS</code> 这个是安全链接，需要配置相关的证书和私钥。这个是可以为空的。</li>\n</ul>\n<p>所以，针对于上述这样的配置，我们需要有多种不同的创建不同配置 <code class=\"language-text\">Server</code> 的函数签名，如下所示（代码比较宽，需要左右滚动浏览）：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">NewDefaultServer</span><span class=\"token punctuation\">(</span>addr <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> port <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Server<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Server<span class=\"token punctuation\">{</span>addr<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewTLSServer</span><span class=\"token punctuation\">(</span>addr <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> port <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> tls <span class=\"token operator\">*</span>tls<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Server<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Server<span class=\"token punctuation\">{</span>addr<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> tls<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewServerWithTimeout</span><span class=\"token punctuation\">(</span>addr <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> port <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Server<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Server<span class=\"token punctuation\">{</span>addr<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewTLSServerWithMaxConnAndTimeout</span><span class=\"token punctuation\">(</span>addr <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> port <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> maxconns <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> tls <span class=\"token operator\">*</span>tls<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Server<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Server<span class=\"token punctuation\">{</span>addr<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span> maxconns<span class=\"token punctuation\">,</span> tls<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>因为Go语言不支持重载函数，所以，你得用不同的函数名来应对不同的配置选项。</p>\n<h2>配置对象方案</h2>\n<p>要解决这个问题，最常见的方式是使用一个配置对象，如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Config <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Protocol <span class=\"token builtin\">string</span>\n    Timeout  time<span class=\"token punctuation\">.</span>Duration\n    Maxconns <span class=\"token builtin\">int</span>\n    TLS      <span class=\"token operator\">*</span>tls<span class=\"token punctuation\">.</span>Config\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们把那些非必输的选项都移到一个结构体里，于是 <code class=\"language-text\">Server</code> 对象变成了：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Server <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Addr <span class=\"token builtin\">string</span>\n    Port <span class=\"token builtin\">int</span>\n    Conf <span class=\"token operator\">*</span>Config\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>于是，我们只需要一个 <code class=\"language-text\">NewServer()</code> 的函数了，在使用前需要构造 <code class=\"language-text\">Config</code> 对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>addr <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> port <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> conf <span class=\"token operator\">*</span>Config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Server<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Using the default configuratrion</span>\nsrv1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span> \nconf <span class=\"token operator\">:=</span> ServerConfig<span class=\"token punctuation\">{</span>Protocol<span class=\"token punctuation\">:</span><span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> Timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">60</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">}</span>\nsrv2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"locahost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>conf<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这段代码算是不错了，大多数情况下，我们可能就止步于此了。但是，对于有洁癖的有追求的程序员来说，他们能看到其中有一点不好的是，<code class=\"language-text\">Config</code> 并不是必需的，所以，你需要判断是否是 <code class=\"language-text\">nil</code> 或是 Empty – <code class=\"language-text\">Config{}</code>这让我们的代码感觉还是有点不是很干净。</p>\n<h2>Builder模式</h2>\n<p>如果你是一个Java程序员，熟悉设计模式的一定会很自然地使用上Builder模式。比如如下的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">User user <span class=\"token operator\">=</span> <span class=\"token builtin\">new</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hao Chen\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"haoel@hotmail.com\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">nickname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"左耳朵\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>仿照上面这个模式，我们可以把上面代码改写成如下的代码（注：下面的代码没有考虑出错处理，其中关于出错处理的更多内容，请参看《<a href=\"https://coolshell.cn/articles/21140.html\">Go 编程模式：出错处理</a>》）：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">//使用一个builder类来做包装</span>\n<span class=\"token keyword\">type</span> ServerBuilder <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  Server\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sb <span class=\"token operator\">*</span>ServerBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>addr <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> port <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ServerBuilder <span class=\"token punctuation\">{</span>\n  sb<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">.</span>Addr <span class=\"token operator\">=</span> addr\n  sb<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">.</span>Port <span class=\"token operator\">=</span> port\n  <span class=\"token comment\">//其它代码设置其它成员的默认值</span>\n  <span class=\"token keyword\">return</span> sb\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sb <span class=\"token operator\">*</span>ServerBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">WithProtocol</span><span class=\"token punctuation\">(</span>protocol <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ServerBuilder <span class=\"token punctuation\">{</span>\n  sb<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">.</span>Protocol <span class=\"token operator\">=</span> protocol \n  <span class=\"token keyword\">return</span> sb\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sb <span class=\"token operator\">*</span>ServerBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">WithMaxConn</span><span class=\"token punctuation\">(</span> maxconn <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ServerBuilder <span class=\"token punctuation\">{</span>\n  sb<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">.</span>MaxConns <span class=\"token operator\">=</span> maxconn\n  <span class=\"token keyword\">return</span> sb\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sb <span class=\"token operator\">*</span>ServerBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">WithTimeOut</span><span class=\"token punctuation\">(</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ServerBuilder <span class=\"token punctuation\">{</span>\n  sb<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">.</span>Timeout <span class=\"token operator\">=</span> timeout\n  <span class=\"token keyword\">return</span> sb\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sb <span class=\"token operator\">*</span>ServerBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">WithTLS</span><span class=\"token punctuation\">(</span> tls <span class=\"token operator\">*</span>tls<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ServerBuilder <span class=\"token punctuation\">{</span>\n  sb<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">.</span>TLS <span class=\"token operator\">=</span> tls\n  <span class=\"token keyword\">return</span> sb\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sb <span class=\"token operator\">*</span>ServerBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Server<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span>  sb<span class=\"token punctuation\">.</span>Server\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>于是就可以以如下的方式来使用了</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">sb <span class=\"token operator\">:=</span> ServerBuilder<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nserver<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n  <span class=\"token function\">WithProtocol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"udp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n  <span class=\"token function\">WithMaxConn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n  <span class=\"token function\">WithTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n  <span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面这样的方式也很清楚，不需要额外的Config类，使用链式的函数调用的方式来构造一个对象，只需要多加一个Builder类，这个Builder类似乎有点多余，我们似乎可以直接在<code class=\"language-text\">Server</code> 上进行这样的 Builder 构造，的确是这样的。但是在处理错误的时候可能就有点麻烦，不如一个包装类更好一些。</p>\n<p>如果我们想省掉这个包装的结构体，那么就轮到我们的Functional Options上场了，函数式编程。</p>\n<h2>Functional Options</h2>\n<p>首先，我们先定义一个函数类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Option <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Server<span class=\"token punctuation\">)</span></code></pre></div>\n<p>然后，我们可以使用函数式的方式定义一组如下的函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Protocol</span><span class=\"token punctuation\">(</span>p <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Server<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">.</span>Protocol <span class=\"token operator\">=</span> p\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Timeout</span><span class=\"token punctuation\">(</span>timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Server<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">.</span>Timeout <span class=\"token operator\">=</span> timeout\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">MaxConns</span><span class=\"token punctuation\">(</span>maxconns <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Server<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">.</span>MaxConns <span class=\"token operator\">=</span> maxconns\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TLS</span><span class=\"token punctuation\">(</span>tls <span class=\"token operator\">*</span>tls<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Server<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">.</span>TLS <span class=\"token operator\">=</span> tls\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面这组代码传入一个参数，然后返回一个函数，返回的这个函数会设置自己的 <code class=\"language-text\">Server</code> 参数。例如：</p>\n<ul>\n<li>当我们调用其中的一个函数用 <code class=\"language-text\">MaxConns(30)</code> 时</li>\n<li>其返回值是一个 <code class=\"language-text\">func(s* Server) { s.MaxConns = 30 }</code> 的函数。</li>\n</ul>\n<p>这个叫高阶函数。在数学上，就好像这样的数学定义，计算长方形面积的公式为： <code class=\"language-text\">rect(width, height) = width * height;</code> 这个函数需要两个参数，我们包装一下，就可以变成计算正方形面积的公式：<code class=\"language-text\">square(width) = rect(width, width)</code> 也就是说，<code class=\"language-text\">squre(width)</code>返回了另外一个函数，这个函数就是<code class=\"language-text\">rect(w,h)</code> 只不过他的两个参数是一样的。即：<code class=\"language-text\">f(x) = g(x, x)</code></p>\n<p>好了，现在我们再定一个 <code class=\"language-text\">NewServer()</code>的函数，其中，有一个可变参数 <code class=\"language-text\">options</code> 其可以传出多个上面上的函数，然后使用一个for-loop来设置我们的 <code class=\"language-text\">Server</code> 对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>addr <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> port <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Server<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Server<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  srv <span class=\"token operator\">:=</span> Server<span class=\"token punctuation\">{</span>\n    Addr<span class=\"token punctuation\">:</span>     addr<span class=\"token punctuation\">,</span>\n    Port<span class=\"token punctuation\">:</span>     port<span class=\"token punctuation\">,</span>\n    Protocol<span class=\"token punctuation\">:</span> <span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span>\n    Timeout<span class=\"token punctuation\">:</span>  <span class=\"token number\">30</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span>\n    MaxConns<span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n    TLS<span class=\"token punctuation\">:</span>      <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> option <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>srv<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>srv<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>于是，我们在创建 <code class=\"language-text\">Server</code> 对象的时候，我们就可以这样来了。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">s1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\ns2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Protocol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"udp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ns3<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0.0.0.0\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MaxConns</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>怎么样，是不是高度的整洁和优雅？不但解决了使用 <code class=\"language-text\">Config</code> 对象方式 的需要有一个config参数，但在不需要的时候，是放 <code class=\"language-text\">nil</code> 还是放 <code class=\"language-text\">Config{}</code>的选择困难，也不需要引用一个Builder的控制对象，直接使用函数式编程的试，在代码阅读上也很优雅。</p>\n<p>所以，以后，大家在要玩类似的代码时，强烈推荐使用Functional Options这种方式，这种方式至少带来了如下的好处：</p>\n<ul>\n<li>直觉式的编程</li>\n<li>高度的可配置化</li>\n<li>很容易维护和扩展</li>\n<li>自文档</li>\n<li>对于新来的人很容易上手</li>\n<li>没有什么令人困惑的事（是nil 还是空）</li>\n</ul>\n<h2>参考文档</h2>\n<ul>\n<li><strong>“Self referential functions and design” by Rob Pike</strong>\n<a href=\"http://commandcenter.blogspot.com.au/2014/01/self-referential-functions-and-design.html\">http://commandcenter.blogspot.com.au/2014/01/self-referential-functions-and-design.html</a></li>\n</ul>\n<p>(全文完)</p>\n<p>转载：文章作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 – CoolShell</a></p>\n<p><img src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\" alt=\"img\" style=\"zoom:33%;\"> <img src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" alt=\"img\" style=\"zoom:33%;\">\n关注CoolShell微信公众账号和微信小程序</p>","frontmatter":{"title":"GO 编程模式03：FUNCTIONAL OPTIONS","date":"2021-01-24T11:03:00.000Z","description":null}},"previous":{"fields":{"slug":"/Go编程模式-转载自酷壳/GO 编程模式：错误处理/"},"frontmatter":{"title":"GO 编程模式02：错误处理","slug":"go-program-pattern-handle-errors"}},"next":{"fields":{"slug":"/Go编程模式-转载自酷壳/GO编程模式：委托和反转控制/"},"frontmatter":{"title":"GO编程模式04：委托和反转控制","slug":"go-program-pattern-delegation-and-reverse-control"}}},"pageContext":{"id":"c4e4fd37-3de3-5230-9b2f-54222199a4f6","previousPostId":"1dd5ad20-3a11-5306-bede-b04575975555","nextPostId":"9dec1a03-1f93-52fc-ae60-ce8a979dbc03"}},"staticQueryHashes":["2841359383","394414991"]}