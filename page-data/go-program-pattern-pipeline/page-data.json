{"componentChunkName":"component---src-templates-blog-post-js","path":"/go-program-pattern-pipeline","result":{"data":{"site":{"siteMetadata":{"title":"Panda8z`s Blog"}},"markdownRemark":{"id":"7c6f2bca-c711-5f81-bef3-94e459c3e3b8","excerpt":"img 本篇文章，我们着重介绍Go编程中的Pipeline模式。对于Pipeline用过Unix/Linux命令行的人都不会陌生，他是一种把各种命令拼接起来完成一个更强功能的技术方法。在今天，流式处理，函数式编程，以及应用网关对微服务进行简单的API编排，其实都是受pipeline这种技术方式的影响，Pipeline…","html":"<p><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.line_.-1024x191.png\" alt=\"img\"></p>\n<p>本篇文章，我们着重介绍Go编程中的Pipeline模式。对于Pipeline用过Unix/Linux命令行的人都不会陌生，他是一种把各种命令拼接起来完成一个更强功能的技术方法。在今天，流式处理，函数式编程，以及应用网关对微服务进行简单的API编排，其实都是受pipeline这种技术方式的影响，Pipeline这种技术在可以很容易的把代码按单一职责的原则拆分成多个高内聚低耦合的小模块，然后可以很方便地拼装起来去完成比较复杂的功能。</p>\n<h2>HTTP 处理</h2>\n<p>这种Pipeline的模式，我们在《<a href=\"https://coolshell.cn/articles/17929.html\">Go编程模式：修饰器</a>》中有过一个示例，我们在这里再重温一下。在那篇文章中，我们有一堆如 <code class=\"language-text\">WithServerHead()</code> 、<code class=\"language-text\">WithBasicAuth()</code> 、<code class=\"language-text\">WithDebugLog()</code>这样的小功能代码，在我们需要实现某个HTTP API 的时候，我们就可以很容易的组织起来。</p>\n<p>原来的代码是下面这个样子：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/v1/hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithServerHeader</span><span class=\"token punctuation\">(</span><span class=\"token function\">WithAuthCookie</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/v2/hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithServerHeader</span><span class=\"token punctuation\">(</span><span class=\"token function\">WithBasicAuth</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/v3/hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithServerHeader</span><span class=\"token punctuation\">(</span><span class=\"token function\">WithBasicAuth</span><span class=\"token punctuation\">(</span><span class=\"token function\">WithDebugLog</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>通过一个代理函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> HttpHandlerDecorator <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>HandlerFunc<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>HandlerFunc\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span>h http<span class=\"token punctuation\">.</span>HandlerFunc<span class=\"token punctuation\">,</span> decors <span class=\"token operator\">...</span>HttpHandlerDecorator<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>HandlerFunc <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> decors <span class=\"token punctuation\">{</span>\n        d <span class=\"token operator\">:=</span> decors<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>decors<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span> <span class=\"token comment\">// iterate in reverse</span>\n        h <span class=\"token operator\">=</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> h\n<span class=\"token punctuation\">}</span>\n\n我们就可以移除不断的嵌套像下面这样使用了：\n\n<span class=\"token string\">``</span>`<span class=\"token keyword\">go</span>\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/v4/hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">,</span>\n                WithServerHeader<span class=\"token punctuation\">,</span> WithBasicAuth<span class=\"token punctuation\">,</span> WithDebugLog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Channel 管理</h2>\n<p>当然，如果你要写出一个<a href=\"https://coolshell.cn/articles/17929.html#%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BF%AE%E9%A5%B0%E5%99%A8\">泛型的pipeline框架</a>并不容易，而使用<a href=\"https://coolshell.cn/articles/21179.html\">Go Generation</a>，但是，我们别忘了Go语言最具特色的 Go Routine 和 Channel 这两个神器完全也可以被我们用来构造这种编程。</p>\n<p>Rob Pike在 <a href=\"https://blog.golang.org/pipelines\">Go Concurrency Patterns: Pipelines and cancellation</a> 这篇blog中介绍了如下的一种编程模式。</p>\n<h3>Channel转发函数</h3>\n<p>首先，我们需一个 <code class=\"language-text\">echo()</code>函数，其会把一个整型数组放到一个Channel中，并返回这个Channel</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span>nums <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  out <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> nums <span class=\"token punctuation\">{</span>\n      out <span class=\"token operator\">&lt;-</span> n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> out\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后，我们依照这个模式，我们可以写下这个函数。</p>\n<h3>平方函数</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sq</span><span class=\"token punctuation\">(</span>in <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  out <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> in <span class=\"token punctuation\">{</span>\n      out <span class=\"token operator\">&lt;-</span> n <span class=\"token operator\">*</span> n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> out\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>过滤奇数函数</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">odd</span><span class=\"token punctuation\">(</span>in <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  out <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> in <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> n<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        out <span class=\"token operator\">&lt;-</span> n\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> out\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>求和函数</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>in <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  out <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> in <span class=\"token punctuation\">{</span>\n      sum <span class=\"token operator\">+=</span> n\n    <span class=\"token punctuation\">}</span>\n    out <span class=\"token operator\">&lt;-</span> sum\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> out\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后，我们的用户端的代码如下所示：（注：<strong>你可能会觉得，<code class=\"language-text\">sum()</code>，<code class=\"language-text\">odd()</code> 和 <code class=\"language-text\">sq()</code>太过于相似。你其实可以通过我们之前的<a href=\"https://coolshell.cn/articles/21164.html\">Map/Reduce编程模式</a>或是<a href=\"https://coolshell.cn/articles/21179.html\">Go Generation的方式</a>来合并一下</strong>）</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token function\">sq</span><span class=\"token punctuation\">(</span><span class=\"token function\">odd</span><span class=\"token punctuation\">(</span><span class=\"token function\">echo</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码类似于我们执行了Unix/Linux命令： <code class=\"language-text\">echo $nums | sq | sum</code></p>\n<p>同样，如果你不想有那么多的函数嵌套，你可以使用一个代理函数来完成。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> EchoFunc <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token keyword\">type</span> PipeFunc <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token keyword\">func</span> <span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span>nums <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> echo EchoFunc<span class=\"token punctuation\">,</span> pipeFns <span class=\"token operator\">...</span> PipeFunc<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  ch  <span class=\"token operator\">:=</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> pipeFns <span class=\"token punctuation\">{</span>\n    ch <span class=\"token operator\">=</span> pipeFns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> ch\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后，就可以这样做了：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span>    \n<span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> gen<span class=\"token punctuation\">,</span> odd<span class=\"token punctuation\">,</span> sq<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Fan in/Out</h2>\n<p>动用Go语言的 Go Routine和 Channel还有一个好处，就是可以写出1对多，或多对1的pipeline，也就是Fan In/ Fan Out。下面，我们来看一个Fan in的示例：</p>\n<p>我们想通过并发的方式来对一个很长的数组中的质数进行求和运算，我们想先把数组分段求和，然后再把其集中起来。</p>\n<p>下面是我们的主函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">makeRange</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> max <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> max<span class=\"token operator\">-</span>min<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> a <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> min <span class=\"token operator\">+</span> i\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> a\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  nums <span class=\"token operator\">:=</span> <span class=\"token function\">makeRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n  in <span class=\"token operator\">:=</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> nProcess <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n  <span class=\"token keyword\">var</span> chans <span class=\"token punctuation\">[</span>nProcess<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> chans <span class=\"token punctuation\">{</span>\n    chans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token function\">prime</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>chans<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>再看我们的 <code class=\"language-text\">prime()</code> 函数的实现 ：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">is_prime</span><span class=\"token punctuation\">(</span>value <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">Floor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token builtin\">float64</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> value<span class=\"token operator\">%</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">></span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">prime</span><span class=\"token punctuation\">(</span>in <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  out <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> in <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token function\">is_prime</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        out <span class=\"token operator\">&lt;-</span> n\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> out\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们可以看到，</p>\n<ul>\n<li>我们先制造了从1到10000的一个数组，</li>\n<li>然后，把这堆数组全部 <code class=\"language-text\">echo</code>到一个channel里 – <code class=\"language-text\">in</code></li>\n<li>此时，生成 5 个 Channel，然后都调用 <code class=\"language-text\">sum(prime(in))</code> ，于是每个Sum的Go Routine都会开始计算和</li>\n<li>最后再把所有的结果再求和拼起来，得到最终的结果。</li>\n</ul>\n<p>其中的merge代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>cs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n  out <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n  wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> cs <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c <span class=\"token punctuation\">{</span>\n        out <span class=\"token operator\">&lt;-</span> n\n      <span class=\"token punctuation\">}</span>\n      wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> out\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>用图片表示一下，整个程序的结构如下所示：</p>\n<p><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/pipeline-1024x425.png\" alt=\"img\"></p>\n<h2>延伸阅读</h2>\n<p>如果你还想了解更多的这样的与并发相关的技术，可以参看下面这些资源：</p>\n<ul>\n<li><strong>Go</strong> <strong>Concurrency</strong> <strong>Patterns</strong> – <strong>Rob</strong> <strong>Pike –</strong> 2012 Google I/O **\n**presents the basics of Go‘s concurrency primitives and several ways to apply them.\n<a href=\"https://www.youtube.com/watch?v=f6kdp27TYZs\">https://www.youtube.com/watch?v=f6kdp27TYZs</a></li>\n<li><strong>Advanced Go Concurrency Patterns</strong> – <strong>Rob</strong> <strong>Pike</strong> – 2013 Google I/O **\n**covers more complex uses of Go’s primitives, especially select.\n<a href=\"https://blog.golang.org/advanced-go-concurrency-patterns\">https://blog.golang.org/advanced-go-concurrency-patterns</a></li>\n<li><strong>Squinting at Power Series</strong> – <strong>Douglas McIlroy</strong>‘s paper **\n**shows how Go-like concurrency provides elegant support for complex calculations.\n<a href=\"https://swtch.com/~rsc/thread/squint.pdf\">https://swtch.com/~rsc/thread/squint.pdf</a></li>\n</ul>\n<p>（全文完）</p>\n<p>转载：文章作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 – CoolShell</a></p>\n<p><img src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\" alt=\"img\" style=\"zoom:33%;\"> <img src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" alt=\"img\" style=\"zoom:33%;\">\n关注CoolShell微信公众账号和微信小程序</p>","frontmatter":{"title":"GO编程模式08：PIPELINE","date":"2021-01-24T11:08:00.000Z","description":null}},"previous":{"fields":{"slug":"/Go编程模式-转载自酷壳/GO编程模式：修饰器/"},"frontmatter":{"title":"GO 编程模式07：修饰器","slug":"go-program-pattern-decorator"}},"next":{"fields":{"slug":"/Go编程模式-转载自酷壳/GO 编程模式：K8S VISITOR 模式/"},"frontmatter":{"title":"GO 编程模式09：K8S VISITOR 模式","slug":"go-program-pattern-visitor"}}},"pageContext":{"id":"7c6f2bca-c711-5f81-bef3-94e459c3e3b8","previousPostId":"10a1294c-ceba-5700-8dfe-d97b168723ca","nextPostId":"9b2efd6a-e370-56d8-8a92-7353653129cc"}},"staticQueryHashes":["2841359383","394414991"]}