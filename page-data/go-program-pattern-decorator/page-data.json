{"componentChunkName":"component---src-templates-blog-post-js","path":"/go-program-pattern-decorator","result":{"data":{"site":{"siteMetadata":{"title":"Panda8z`s Blog"}},"markdownRemark":{"id":"10a1294c-ceba-5700-8dfe-d97b168723ca","excerpt":"img 之前写过一篇《Python修饰器的函数式编程》，\n这种模式很容易的可以把一些函数装配到另外一些函数上，可以让你的代码更为的简单，也可以让一些“小功能型”的代码复用性更高，\n让代码中的函数可以像乐高玩具那样自由地拼装。\n所以，一直以来，我对修饰器decoration这种编程模式情有独钟，这里写一篇Go…","html":"<p><img src=\"https://coolshell.cn/wp-content/uploads/2017/06/go-hardhat.png\" alt=\"img\"></p>\n<p>之前写过一篇《<a href=\"https://coolshell.cn/articles/11265.html\">Python修饰器的函数式编程</a>》，\n这种模式很容易的可以把一些函数装配到另外一些函数上，可以让你的代码更为的简单，也可以让一些“小功能型”的代码复用性更高，\n让代码中的函数可以像乐高玩具那样自由地拼装。\n所以，一直以来，我对修饰器decoration这种编程模式情有独钟，这里写一篇Go语言相关的文章。</p>\n<p>看过<a href=\"https://coolshell.cn/articles/11265.html\">Python修饰器</a>那篇文章的同学，一定知道这是一种函数式编程的玩法——用一个高阶函数来包装一下。多唠叨一句，关于函数式编程，可以参看我之前写过一篇文章《<a href=\"https://coolshell.cn/articles/10822.html\">函数式编程</a>》，这篇文章主要是，想通过从过程式编程的思维方式过渡到函数式编程的思维方式，从而带动更多的人玩函数式编程，所以，如果你想了解一下函数式编程，那么可以移步先阅读一下。所以，Go语言的修饰器编程模式，其实也就是函数式编程的模式。</p>\n<p>不过，要提醒注意的是，Go 语言的“糖”不多，而且又是强类型的静态无虚拟机的语言，所以，无法做到像 Java 和 Python 那样的优雅的修饰器的代码。当然，也许是我才才疏学浅，如果你知道有更多的写法，请你一定告诉我。先谢过了。</p>\n<h2>简单示例</h2>\n<p>我们先来看一个示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Started\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>Hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们可以看到，我们动用了一个高阶函数 <code class=\"language-text\">decorator()</code>，在调用的时候，先把 <code class=\"language-text\">Hello()</code> 函数传进去，然后其返回一个匿名函数，这个匿名函数中除了运行了自己的代码，也调用了被传入的 <code class=\"language-text\">Hello()</code> 函数。</p>\n<p>这个玩法和 Python 的异曲同工，只不过，有些遗憾的是，Go 并不支持像 Python 那样的 <code class=\"language-text\">@decorator</code> 语法糖。所以，在调用上有些难看。当然，如果你要想让代码容易读一些，你可以这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">hello <span class=\"token operator\">:=</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>Hello<span class=\"token punctuation\">)</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>我们再来看一个和计算运行时间的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n  <span class=\"token string\">\"reflect\"</span>\n  <span class=\"token string\">\"runtime\"</span>\n  <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> SumFunc <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int64</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">getFunctionName</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">FuncForPC</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">timedSumFunc</span><span class=\"token punctuation\">(</span>f SumFunc<span class=\"token punctuation\">)</span> SumFunc <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int64</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--- Time Elapsed (%s): %v ---\\n\"</span><span class=\"token punctuation\">,</span> \n          <span class=\"token function\">getFunctionName</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Sum1</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int64</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> sum <span class=\"token builtin\">int64</span>\n  sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">if</span> start <span class=\"token operator\">></span> end <span class=\"token punctuation\">{</span>\n    start<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> end<span class=\"token punctuation\">,</span> start\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    sum <span class=\"token operator\">+=</span> i\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Sum2</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int64</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> start <span class=\"token operator\">></span> end <span class=\"token punctuation\">{</span>\n    start<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> end<span class=\"token punctuation\">,</span> start\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">+</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  sum1 <span class=\"token operator\">:=</span> <span class=\"token function\">timedSumFunc</span><span class=\"token punctuation\">(</span>Sum1<span class=\"token punctuation\">)</span>\n  sum2 <span class=\"token operator\">:=</span> <span class=\"token function\">timedSumFunc</span><span class=\"token punctuation\">(</span>Sum2<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sum1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sum2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>关于上面的代码，有几个事说明一下：</p>\n<p>1）有两个 Sum 函数，<code class=\"language-text\">Sum1()</code> 函数就是简单的做个循环，<code class=\"language-text\">Sum2()</code> 函数动用了数据公式。（注意：start 和 end 有可能有负数的情况）</p>\n<p>2）代码中使用了 Go 语言的反射机器来获取函数名。</p>\n<p>3）修饰器函数是 <code class=\"language-text\">timedSumFunc()</code></p>\n<p>运行后输出：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ go run time.sum.go\n--- Time Elapsed <span class=\"token punctuation\">(</span>main.Sum1<span class=\"token punctuation\">)</span>: <span class=\"token number\">3</span>.557469ms ---\n--- Time Elapsed <span class=\"token punctuation\">(</span>main.Sum2<span class=\"token punctuation\">)</span>: 291ns ---\n<span class=\"token number\">49999954995000</span>, <span class=\"token number\">49999954995000</span></code></pre></div>\n<h2>HTTP 相关的一个示例</h2>\n<p>我们再来看一个处理 HTTP 请求的相关的例子。</p>\n<p>先看一个简单的 HTTP Server 的代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"log\"</span>\n    <span class=\"token string\">\"net/http\"</span>\n    <span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithServerHeader</span><span class=\"token punctuation\">(</span>h http<span class=\"token punctuation\">.</span>HandlerFunc<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>HandlerFunc <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--->WithServerHeader()\"</span><span class=\"token punctuation\">)</span>\n        w<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"HelloServer v0.0.1\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Recieved Request %s from %s\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>RemoteAddr<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello, World! \"</span><span class=\"token operator\">+</span>r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/v1/hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithServerHeader</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ListenAndServe: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面代码中使用到了修饰模式，<code class=\"language-text\">WithServerHeader()</code> 函数就是一个 Decorator，其传入一个 <code class=\"language-text\">http.HandlerFunc</code>，然后返回一个改写的版本。上面的例子还是比较简单，用 <code class=\"language-text\">WithServerHeader()</code> 就可以加入一个 Response 的 Header。</p>\n<p>于是，这样的函数我们可以写出好些个。如下所示，有写 HTTP 响应头的，有写认证 Cookie 的，有检查认证Cookie的，有打日志的……</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"log\"</span>\n    <span class=\"token string\">\"net/http\"</span>\n    <span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithServerHeader</span><span class=\"token punctuation\">(</span>h http<span class=\"token punctuation\">.</span>HandlerFunc<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>HandlerFunc <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--->WithServerHeader()\"</span><span class=\"token punctuation\">)</span>\n        w<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"HelloServer v0.0.1\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithAuthCookie</span><span class=\"token punctuation\">(</span>h http<span class=\"token punctuation\">.</span>HandlerFunc<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>HandlerFunc <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--->WithAuthCookie()\"</span><span class=\"token punctuation\">)</span>\n        cookie <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>http<span class=\"token punctuation\">.</span>Cookie<span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Auth\"</span><span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Pass\"</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">}</span>\n        http<span class=\"token punctuation\">.</span><span class=\"token function\">SetCookie</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> cookie<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithBasicAuth</span><span class=\"token punctuation\">(</span>h http<span class=\"token punctuation\">.</span>HandlerFunc<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>HandlerFunc <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--->WithBasicAuth()\"</span><span class=\"token punctuation\">)</span>\n        cookie<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Auth\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">||</span> cookie<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">!=</span> <span class=\"token string\">\"Pass\"</span> <span class=\"token punctuation\">{</span>\n            w<span class=\"token punctuation\">.</span><span class=\"token function\">WriteHeader</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusForbidden<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithDebugLog</span><span class=\"token punctuation\">(</span>h http<span class=\"token punctuation\">.</span>HandlerFunc<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>HandlerFunc <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--->WithDebugLog\"</span><span class=\"token punctuation\">)</span>\n        r<span class=\"token punctuation\">.</span><span class=\"token function\">ParseForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">)</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">)</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scheme\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">)</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">[</span><span class=\"token string\">\"url_long\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> r<span class=\"token punctuation\">.</span>Form <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key:\"</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"val:\"</span><span class=\"token punctuation\">,</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Recieved Request %s from %s\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>RemoteAddr<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello, World! \"</span><span class=\"token operator\">+</span>r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/v1/hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithServerHeader</span><span class=\"token punctuation\">(</span><span class=\"token function\">WithAuthCookie</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/v2/hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithServerHeader</span><span class=\"token punctuation\">(</span><span class=\"token function\">WithBasicAuth</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/v3/hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithServerHeader</span><span class=\"token punctuation\">(</span><span class=\"token function\">WithBasicAuth</span><span class=\"token punctuation\">(</span><span class=\"token function\">WithDebugLog</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ListenAndServe: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>多个修饰器的 Pipeline</h2>\n<p>在使用上，需要对函数一层层的套起来，看上去好像不是很好看，如果需要 decorator 比较多的话，代码会比较难看了。嗯，我们可以重构一下。</p>\n<p>重构时，我们需要先写一个工具函数——用来遍历并调用各个 decorator：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> HttpHandlerDecorator <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>HandlerFunc<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>HandlerFunc\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span>h http<span class=\"token punctuation\">.</span>HandlerFunc<span class=\"token punctuation\">,</span> decors <span class=\"token operator\">...</span>HttpHandlerDecorator<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>HandlerFunc <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> decors <span class=\"token punctuation\">{</span>\n        d <span class=\"token operator\">:=</span> decors<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>decors<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span> <span class=\"token comment\">// iterate in reverse</span>\n        h <span class=\"token operator\">=</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> h\n<span class=\"token punctuation\">}</span>\n\n然后，我们就可以像下面这样使用了。\n\n<span class=\"token string\">``</span>`<span class=\"token keyword\">go</span>\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/v4/hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">,</span>\n                WithServerHeader<span class=\"token punctuation\">,</span> WithBasicAuth<span class=\"token punctuation\">,</span> WithDebugLog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这样的代码是不是更易读了一些？pipeline 的功能也就出来了。</p>\n<h2>泛型的修饰器</h2>\n<p>不过，对于 Go 的修饰器模式，还有一个小问题 —— 好像无法做到泛型，就像上面那个计算时间的函数一样，其代码耦合了需要被修饰的函数的接口类型，无法做到非常通用，如果这个事解决不了，那么，这个修饰器模式还是有点不好用的。</p>\n<p>因为 Go 语言不像 Python 和 Java，Python是动态语言，而 Java 有语言虚拟机，所以他们可以干好些比较变态的事，然而 Go 语言是一个静态的语言，这意味着其类型需要在编译时就要搞定，否则无法编译。不过，Go 语言支持的最大的泛型是 <code class=\"language-text\">interface{}</code> 还有比较简单的 reflection 机制，在上面做做文章，应该还是可以搞定的。</p>\n<p>废话不说，下面是我用 reflection 机制写的一个比较通用的修饰器（为了便于阅读，我删除了出错判断代码）</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Decorator</span><span class=\"token punctuation\">(</span>decoPtr<span class=\"token punctuation\">,</span> fn <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> decoratedFunc<span class=\"token punctuation\">,</span> targetFunc reflect<span class=\"token punctuation\">.</span>Value\n    decoratedFunc <span class=\"token operator\">=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>decoPtr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    targetFunc <span class=\"token operator\">=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n    v <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">MakeFunc</span><span class=\"token punctuation\">(</span>targetFunc<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>in <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>out <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before\"</span><span class=\"token punctuation\">)</span>\n                out <span class=\"token operator\">=</span> targetFunc<span class=\"token punctuation\">.</span><span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span>\n                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    decoratedFunc<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码动用了 <code class=\"language-text\">reflect.MakeFunc()</code> 函数制出了一个新的函数其中的 <code class=\"language-text\">targetFunc.Call(in)</code> 调用了被修饰的函数。关于 Go 语言的反射机制，推荐官方文章 —— 《<a href=\"https://blog.golang.org/laws-of-reflection\">The Laws of Reflection</a>》，在这里我不多说了。</p>\n<p>上面这个 <code class=\"language-text\">Decorator()</code> 需要两个参数，</p>\n<ul>\n<li>第一个是出参 <code class=\"language-text\">decoPtr</code> ，就是完成修饰后的函数</li>\n<li>第二个是入参 <code class=\"language-text\">fn</code> ，就是需要修饰的函数</li>\n</ul>\n<p>这样写是不是有些二？的确是的。不过，这是我个人在 Go 语言里所能写出来的最好的的代码了。如果你知道更多优雅的，请你一定告诉我！</p>\n<p>好的，让我们来看一下使用效果。首先假设我们有两个需要修饰的函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %d, %d \\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s, %s \\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后，我们可以这样做：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> MyFoo <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">var</span> myfoo MyFoo\n\n<span class=\"token function\">Decorator</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>myfoo<span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">)</span>\n<span class=\"token function\">myfoo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>你会发现，使用 <code class=\"language-text\">Decorator()</code> 时，还需要先声明一个函数签名，感觉好傻啊。一点都不泛型，不是吗？</p>\n<p>嗯。如果你不想声明函数签名，那么你也可以这样</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">mybar <span class=\"token operator\">:=</span> bar\n\n<span class=\"token function\">Decorator</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mybar<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">)</span>\n<span class=\"token function\">mybar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello,\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>好吧，看上去不是那么的漂亮，但是 it works。看样子 Go 语言目前本身的特性无法做成像 Java 或 Python 那样，对此，我们只能多求 Go 语言多放糖了！</p>\n<p>Again， 如果你有更好的写法，请你一定要告诉我。</p>\n<p>（全文完）</p>\n<p>转载：文章作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 – CoolShell</a></p>\n<p><img src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\" alt=\"img\" style=\"zoom:33%;\"> <img src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" alt=\"img\" style=\"zoom:33%;\">\n关注CoolShell微信公众账号和微信小程序</p>","frontmatter":{"title":"GO 编程模式07：修饰器","date":"2021-01-24T11:07:00.000Z","description":null}},"previous":{"fields":{"slug":"/Go编程模式-转载自酷壳/GO 编程模式：GO GENERATION/"},"frontmatter":{"title":"GO 编程模式06：GO GENERATION","slug":"go-program-pattern-generation"}},"next":{"fields":{"slug":"/Go编程模式-转载自酷壳/GO编程模式：PIPELINE/"},"frontmatter":{"title":"GO编程模式08：PIPELINE","slug":"go-program-pattern-pipeline"}}},"pageContext":{"id":"10a1294c-ceba-5700-8dfe-d97b168723ca","previousPostId":"03fb552d-357a-585b-9592-88d70c00c609","nextPostId":"7c6f2bca-c711-5f81-bef3-94e459c3e3b8"}},"staticQueryHashes":["2841359383","394414991"]}